{"remainingRequest":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js??ref--0-1!/Users/shanebeal/Desktop/bodewiki/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shanebeal/Desktop/bodewiki/client/components/editor/editor-asciidoc.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shanebeal/Desktop/bodewiki/client/components/editor/editor-asciidoc.vue","mtime":1742769082000},{"path":"/Users/shanebeal/Desktop/bodewiki/.babelrc","mtime":1742797763162},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/cache-loader/dist/cjs.js","mtime":1742846258556},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js","mtime":1742846259254},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/vue-loader/lib/index.js","mtime":1742846259543}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9zZXQgZnJvbSAibG9kYXNoL3NldCI7CmltcG9ydCBfbGFzdCBmcm9tICJsb2Rhc2gvbGFzdCI7CmltcG9ydCBfc3RhcnRzV2l0aCBmcm9tICJsb2Rhc2gvc3RhcnRzV2l0aCI7CmltcG9ydCBfdGltZXMgZnJvbSAibG9kYXNoL3RpbWVzIjsKaW1wb3J0IF9mbGF0dGVuIGZyb20gImxvZGFzaC9mbGF0dGVuIjsKaW1wb3J0IF9kZWJvdW5jZSBmcm9tICJsb2Rhc2gvZGVib3VuY2UiOyAvLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBnZXQsIHN5bmMgfSBmcm9tICd2dWV4LXBhdGhpZnknOwppbXBvcnQgRE9NUHVyaWZ5IGZyb20gJ2RvbXB1cmlmeSc7CgovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci8vIElNUE9SVFMKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKLy8gQ29kZSBNaXJyb3IKaW1wb3J0IENvZGVNaXJyb3IgZnJvbSAnY29kZW1pcnJvcic7CmltcG9ydCAnY29kZW1pcnJvci9saWIvY29kZW1pcnJvci5jc3MnOwoKLy8gTGFuZ3VhZ2UKaW1wb3J0ICdjb2RlbWlycm9yLWFzY2lpZG9jJzsKCi8vIEFkZG9ucwppbXBvcnQgJ2NvZGVtaXJyb3IvYWRkb24vc2VsZWN0aW9uL2FjdGl2ZS1saW5lLmpzJzsKaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2Rpc3BsYXkvZnVsbHNjcmVlbi5qcyc7CmltcG9ydCAnY29kZW1pcnJvci9hZGRvbi9kaXNwbGF5L2Z1bGxzY3JlZW4uY3NzJzsKaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL3NlbGVjdGlvbi9tYXJrLXNlbGVjdGlvbi5qcyc7CmltcG9ydCAnY29kZW1pcnJvci9hZGRvbi9zZWFyY2gvc2VhcmNoY3Vyc29yLmpzJzsKaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2hpbnQvc2hvdy1oaW50LmpzJzsKaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2ZvbGQvZm9sZGNvZGUuanMnOwppbXBvcnQgJ2NvZGVtaXJyb3IvYWRkb24vZm9sZC9mb2xkZ3V0dGVyLmpzJzsKaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2ZvbGQvZm9sZGd1dHRlci5jc3MnOwppbXBvcnQgY21Gb2xkIGZyb20gJy4vY29tbW9uL2NtRm9sZCc7CgovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci8vIElOSVQKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQp2YXIgYXNjaWlkb2N0b3IgPSByZXF1aXJlKCdhc2NpaWRvY3RvcicpKCk7CnZhciBjaGVlcmlvID0gcmVxdWlyZSgnY2hlZXJpbycpOwoKLy8gUGxhdGZvcm0gZGV0ZWN0aW9uCnZhciBDdHJsS2V5ID0gL01hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pID8gJ0NtZCcgOiAnQ3RybCc7CgovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci8vIEhFTFBFUiBGVU5DVElPTlMKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY21Gb2xkLnJlZ2lzdGVyKCdhc2NpaWRvYycpOwoKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLyBWdWUgQ29tcG9uZW50Ci8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY206IG51bGwsCiAgICAgIGN1cnNvclBvczogewogICAgICAgIGNoOiAwLAogICAgICAgIGxpbmU6IDEKICAgICAgfSwKICAgICAgcHJldmlld1Nob3duOiB0cnVlLAogICAgICAvLyBUT0RPCiAgICAgIGluc2VydExpbmtEaWFsb2c6IGZhbHNlLAogICAgICBoZWxwU2hvd246IGZhbHNlLAogICAgICBwcmV2aWV3SFRNTDogJycKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgaXNNb2JpbGU6IGZ1bmN0aW9uIGlzTW9iaWxlKCkgewogICAgICByZXR1cm4gdGhpcy4kdnVldGlmeS5icmVha3BvaW50LnNtQW5kRG93bjsKICAgIH0sCiAgICBpc01vZGFsU2hvd246IGZ1bmN0aW9uIGlzTW9kYWxTaG93bigpIHsKICAgICAgcmV0dXJuIHRoaXMuaGVscFNob3duIHx8IHRoaXMuYWN0aXZlTW9kYWwgIT09ICcnOwogICAgfSwKICAgIGxvY2FsZTogZ2V0KCdwYWdlL2xvY2FsZScpLAogICAgcGF0aDogZ2V0KCdwYWdlL3BhdGgnKSwKICAgIG1vZGU6IGdldCgnZWRpdG9yL21vZGUnKSwKICAgIGFjdGl2ZU1vZGFsOiBzeW5jKCdlZGl0b3IvYWN0aXZlTW9kYWwnKQogIH0sCiAgbWV0aG9kczogewogICAgdG9nZ2xlTW9kYWw6IGZ1bmN0aW9uIHRvZ2dsZU1vZGFsKGtleSkgewogICAgICB0aGlzLmFjdGl2ZU1vZGFsID0gdGhpcy5hY3RpdmVNb2RhbCA9PT0ga2V5ID8gJycgOiBrZXk7CiAgICAgIHRoaXMuaGVscFNob3duID0gZmFsc2U7CiAgICB9LAogICAgY2xvc2VBbGxNb2RhbDogZnVuY3Rpb24gY2xvc2VBbGxNb2RhbCgpIHsKICAgICAgdGhpcy5hY3RpdmVNb2RhbCA9ICcnOwogICAgICB0aGlzLmhlbHBTaG93biA9IGZhbHNlOwogICAgfSwKICAgIG9uQ21JbnB1dDogX2RlYm91bmNlKGZ1bmN0aW9uIChuZXdDb250ZW50KSB7CiAgICAgIHRoaXMucHJvY2Vzc0NvbnRlbnQobmV3Q29udGVudCk7CiAgICB9LCA2MDApLAogICAgcHJvY2Vzc0NvbnRlbnQ6IGZ1bmN0aW9uIHByb2Nlc3NDb250ZW50KG5ld0NvbnRlbnQpIHsKICAgICAgdGhpcy5wcm9jZXNzTWFya2Vycyh0aGlzLmNtLmZpcnN0TGluZSgpLCB0aGlzLmNtLmxhc3RMaW5lKCkpOwogICAgICB2YXIgaHRtbCA9IGFzY2lpZG9jdG9yLmNvbnZlcnQobmV3Q29udGVudCwgewogICAgICAgIHN0YW5kYWxvbmU6IGZhbHNlLAogICAgICAgIHNhZmU6ICdzYWZlJywKICAgICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgICBzaG93dGl0bGU6IHRydWUsCiAgICAgICAgICBpY29uczogJ2ZvbnQnCiAgICAgICAgfQogICAgICB9KTsKICAgICAgdmFyICQgPSBjaGVlcmlvLmxvYWQoaHRtbCwgewogICAgICAgIGRlY29kZUVudGl0aWVzOiB0cnVlCiAgICAgIH0pOwogICAgICAkKCdwcmUuaGlnaGxpZ2h0ID4gY29kZS5sYW5ndWFnZS1kaWFncmFtJykuZWFjaChmdW5jdGlvbiAoaSwgZWxtKSB7CiAgICAgICAgdmFyIGRpYWdyYW1Db250ZW50ID0gQnVmZmVyLmZyb20oJChlbG0pLmh0bWwoKSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCk7CiAgICAgICAgJChlbG0pLnBhcmVudCgpLnJlcGxhY2VXaXRoKCI8cHJlIGNsYXNzPVwiZGlhZ3JhbVwiPiIgKyBkaWFncmFtQ29udGVudCArICI8L2Rpdj4iKTsKICAgICAgfSk7CiAgICAgIHRoaXMucHJldmlld0hUTUwgPSBET01QdXJpZnkuc2FuaXRpemUoJC5odG1sKCksIHsKICAgICAgICBBRERfVEFHUzogWydmb3JlaWduT2JqZWN0J10KICAgICAgfSk7CiAgICB9LAogICAgLyoqCiAgICAgKiBJbnNlcnQgY29udGVudCBhdCBjdXJzb3IKICAgICAqLwogICAgaW5zZXJ0QXRDdXJzb3I6IGZ1bmN0aW9uIGluc2VydEF0Q3Vyc29yKF9yZWYpIHsKICAgICAgdmFyIGNvbnRlbnQgPSBfcmVmLmNvbnRlbnQ7CiAgICAgIHZhciBjdXJzb3IgPSB0aGlzLmNtLmRvYy5nZXRDdXJzb3IoJ2hlYWQnKTsKICAgICAgdGhpcy5jbS5kb2MucmVwbGFjZVJhbmdlKGNvbnRlbnQsIGN1cnNvcik7CiAgICB9LAogICAgLyoqCiAgICAgKiBJbnNlcnQgY29udGVudCBhZnRlciBjdXJyZW50IGxpbmUKICAgICAqLwogICAgaW5zZXJ0QWZ0ZXI6IGZ1bmN0aW9uIGluc2VydEFmdGVyKF9yZWYyKSB7CiAgICAgIHZhciBjb250ZW50ID0gX3JlZjIuY29udGVudCwKICAgICAgICBuZXdMaW5lID0gX3JlZjIubmV3TGluZTsKICAgICAgdmFyIGN1ckxpbmUgPSB0aGlzLmNtLmRvYy5nZXRDdXJzb3IoJ3RvJykubGluZTsKICAgICAgdmFyIGxpbmVMZW5ndGggPSB0aGlzLmNtLmRvYy5nZXRMaW5lKGN1ckxpbmUpLmxlbmd0aDsKICAgICAgdGhpcy5jbS5kb2MucmVwbGFjZVJhbmdlKG5ld0xpbmUgPyAiXG4iICsgY29udGVudCArICJcbiIgOiBjb250ZW50LCB7CiAgICAgICAgbGluZTogY3VyTGluZSwKICAgICAgICBjaDogbGluZUxlbmd0aCArIDEKICAgICAgfSk7CiAgICB9LAogICAgLyoqCiAgICAgKiBJbnNlcnQgY29udGVudCBiZWZvcmUgY3VycmVudCBsaW5lCiAgICAgKi8KICAgIGluc2VydEJlZm9yZUVhY2hMaW5lOiBmdW5jdGlvbiBpbnNlcnRCZWZvcmVFYWNoTGluZShfcmVmMykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgY29udGVudCA9IF9yZWYzLmNvbnRlbnQsCiAgICAgICAgYWZ0ZXIgPSBfcmVmMy5hZnRlcjsKICAgICAgdmFyIGxpbmVzID0gW107CiAgICAgIGlmICghdGhpcy5jbS5kb2Muc29tZXRoaW5nU2VsZWN0ZWQoKSkgewogICAgICAgIGxpbmVzLnB1c2godGhpcy5jbS5kb2MuZ2V0Q3Vyc29yKCdoZWFkJykubGluZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGluZXMgPSBfZmxhdHRlbih0aGlzLmNtLmRvYy5saXN0U2VsZWN0aW9ucygpLm1hcChmdW5jdGlvbiAoc2wpIHsKICAgICAgICAgIHZhciByYW5nZSA9IE1hdGguYWJzKHNsLmFuY2hvci5saW5lIC0gc2wuaGVhZC5saW5lKSArIDE7CiAgICAgICAgICB2YXIgbG93ZXN0TGluZSA9IHNsLmFuY2hvci5saW5lID4gc2wuaGVhZC5saW5lID8gc2wuaGVhZC5saW5lIDogc2wuYW5jaG9yLmxpbmU7CiAgICAgICAgICByZXR1cm4gX3RpbWVzKHJhbmdlLCBmdW5jdGlvbiAobCkgewogICAgICAgICAgICByZXR1cm4gbCArIGxvd2VzdExpbmU7CiAgICAgICAgICB9KTsKICAgICAgICB9KSk7CiAgICAgIH0KICAgICAgbGluZXMuZm9yRWFjaChmdW5jdGlvbiAobG4pIHsKICAgICAgICB2YXIgbGluZUNvbnRlbnQgPSBfdGhpcy5jbS5kb2MuZ2V0TGluZShsbik7CiAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lQ29udGVudC5sZW5ndGg7CiAgICAgICAgaWYgKF9zdGFydHNXaXRoKGxpbmVDb250ZW50LCBjb250ZW50KSkgewogICAgICAgICAgbGluZUNvbnRlbnQgPSBsaW5lQ29udGVudC5zdWJzdHJpbmcoY29udGVudC5sZW5ndGgpOwogICAgICAgIH0KICAgICAgICBfdGhpcy5jbS5kb2MucmVwbGFjZVJhbmdlKGNvbnRlbnQgKyBsaW5lQ29udGVudCwgewogICAgICAgICAgbGluZTogbG4sCiAgICAgICAgICBjaDogMAogICAgICAgIH0sIHsKICAgICAgICAgIGxpbmU6IGxuLAogICAgICAgICAgY2g6IGxpbmVMZW5ndGgKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIGlmIChhZnRlcikgewogICAgICAgIHZhciBsYXN0TGluZSA9IF9sYXN0KGxpbmVzKTsKICAgICAgICB0aGlzLmNtLmRvYy5yZXBsYWNlUmFuZ2UoIlxuIiArIGFmdGVyICsgIlxuIiwgewogICAgICAgICAgbGluZTogbGFzdExpbmUsCiAgICAgICAgICBjaDogdGhpcy5jbS5kb2MuZ2V0TGluZShsYXN0TGluZSkubGVuZ3RoICsgMQogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgLyoqCiAgICAgKiBVcGRhdGUgY3Vyc29yIHN0YXRlCiAgICAgKi8KICAgIHBvc2l0aW9uU3luYzogZnVuY3Rpb24gcG9zaXRpb25TeW5jKGNtKSB7CiAgICAgIHRoaXMuY3Vyc29yUG9zID0gY20uZ2V0Q3Vyc29yKCdoZWFkJyk7CiAgICB9LAogICAgdG9nZ2xlTWFya3VwOiBmdW5jdGlvbiB0b2dnbGVNYXJrdXAoX3JlZjQpIHsKICAgICAgdmFyIHN0YXJ0ID0gX3JlZjQuc3RhcnQsCiAgICAgICAgZW5kID0gX3JlZjQuZW5kOwogICAgICBpZiAoIWVuZCkgewogICAgICAgIGVuZCA9IHN0YXJ0OwogICAgICB9CiAgICAgIGlmICghdGhpcy5jbS5kb2Muc29tZXRoaW5nU2VsZWN0ZWQoKSkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5jb21taXQoJ3Nob3dOb3RpZmljYXRpb24nLCB7CiAgICAgICAgICBtZXNzYWdlOiB0aGlzLiR0KCdlZGl0b3I6bWFya3VwLm5vU2VsZWN0aW9uRXJyb3InKSwKICAgICAgICAgIHN0eWxlOiAnd2FybmluZycsCiAgICAgICAgICBpY29uOiAnd2FybmluZycKICAgICAgICB9KTsKICAgICAgfQogICAgICB0aGlzLmNtLmRvYy5yZXBsYWNlU2VsZWN0aW9ucyh0aGlzLmNtLmRvYy5nZXRTZWxlY3Rpb25zKCkubWFwKGZ1bmN0aW9uIChzKSB7CiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgcyArIGVuZDsKICAgICAgfSkpOwogICAgfSwKICAgIHNldEhlYWRlckxpbmU6IGZ1bmN0aW9uIHNldEhlYWRlckxpbmUobHZsKSB7CiAgICAgIHZhciBjdXJMaW5lID0gdGhpcy5jbS5kb2MuZ2V0Q3Vyc29yKCdoZWFkJykubGluZTsKICAgICAgdmFyIGxpbmVDb250ZW50ID0gdGhpcy5jbS5kb2MuZ2V0TGluZShjdXJMaW5lKTsKICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lQ29udGVudC5sZW5ndGg7CiAgICAgIGlmIChfc3RhcnRzV2l0aChsaW5lQ29udGVudCwgJz0nKSkgewogICAgICAgIGxpbmVDb250ZW50ID0gbGluZUNvbnRlbnQucmVwbGFjZSgvXig9KyApLywgJycpOwogICAgICB9CiAgICAgIGxpbmVDb250ZW50ID0gX3RpbWVzKGx2bCwgZnVuY3Rpb24gKG4pIHsKICAgICAgICByZXR1cm4gJz0nOwogICAgICB9KS5qb2luKCcnKSArICIgIiArIGxpbmVDb250ZW50OwogICAgICB0aGlzLmNtLmRvYy5yZXBsYWNlUmFuZ2UobGluZUNvbnRlbnQsIHsKICAgICAgICBsaW5lOiBjdXJMaW5lLAogICAgICAgIGNoOiAwCiAgICAgIH0sIHsKICAgICAgICBsaW5lOiBjdXJMaW5lLAogICAgICAgIGNoOiBsaW5lTGVuZ3RoCiAgICAgIH0pOwogICAgfSwKICAgIHRvZ2dsZUZ1bGxzY3JlZW46IGZ1bmN0aW9uIHRvZ2dsZUZ1bGxzY3JlZW4oKSB7CiAgICAgIHRoaXMuY20uc2V0T3B0aW9uKCdmdWxsU2NyZWVuJywgdHJ1ZSk7CiAgICB9LAogICAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIuY20ucmVmcmVzaCgpOwogICAgICB9KTsKICAgIH0sCiAgICBpbnNlcnRMaW5rOiBmdW5jdGlvbiBpbnNlcnRMaW5rKCkgewogICAgICB0aGlzLmluc2VydExpbmtEaWFsb2cgPSB0cnVlOwogICAgfSwKICAgIGluc2VydExpbmtIYW5kbGVyOiBmdW5jdGlvbiBpbnNlcnRMaW5rSGFuZGxlcihfcmVmNSkgewogICAgICB2YXIgbG9jYWxlID0gX3JlZjUubG9jYWxlLAogICAgICAgIHBhdGggPSBfcmVmNS5wYXRoOwogICAgICB2YXIgbGFzdFBhcnQgPSBfbGFzdChwYXRoLnNwbGl0KCcvJykpOwogICAgICB0aGlzLmluc2VydEF0Q3Vyc29yKHsKICAgICAgICBjb250ZW50OiBzaXRlTGFuZ3MubGVuZ3RoID4gMCA/ICJsaW5rOi8iICsgbG9jYWxlICsgIi8iICsgcGF0aCArICJbIiArIGxhc3RQYXJ0ICsgIl0iIDogImxpbms6LyIgKyBwYXRoICsgIlsiICsgbGFzdFBhcnQgKyAiXSIKICAgICAgfSk7CiAgICB9LAogICAgcHJvY2Vzc01hcmtlcnM6IGZ1bmN0aW9uIHByb2Nlc3NNYXJrZXJzKGZyb20sIHRvKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwogICAgICB2YXIgZm91bmQgPSBudWxsOwogICAgICB2YXIgZm91bmRTdGFydCA9IDA7CiAgICAgIHRoaXMuY20uZG9jLmdldEFsbE1hcmtzKCkuZm9yRWFjaChmdW5jdGlvbiAobWspIHsKICAgICAgICBpZiAobWsuX19raW5kKSB7CiAgICAgICAgICBtay5jbGVhcigpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRoaXMuY20uZWFjaExpbmUoZnJvbSwgdG8sIGZ1bmN0aW9uIChsbikgewogICAgICAgIHZhciBsaW5lID0gbG4ubGluZU5vKCk7CiAgICAgICAgaWYgKGxuLnRleHQuc3RhcnRzV2l0aCgnYGBgZGlhZ3JhbScpKSB7CiAgICAgICAgICBmb3VuZCA9ICdkaWFncmFtJzsKICAgICAgICAgIGZvdW5kU3RhcnQgPSBsaW5lOwogICAgICAgIH0gZWxzZSBpZiAobG4udGV4dCA9PT0gJ2BgYCcgJiYgZm91bmQpIHsKICAgICAgICAgIHN3aXRjaCAoZm91bmQpIHsKICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgICAgIC8vIC0+IERJQUdSQU0KICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgICAgIGNhc2UgJ2RpYWdyYW0nOgogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChsaW5lIC0gZm91bmRTdGFydCAhPT0gMikgewogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfdGhpczMuYWRkTWFya2VyKHsKICAgICAgICAgICAgICAgICAga2luZDogJ2RpYWdyYW0nLAogICAgICAgICAgICAgICAgICBmcm9tOiB7CiAgICAgICAgICAgICAgICAgICAgbGluZTogZm91bmRTdGFydCwKICAgICAgICAgICAgICAgICAgICBjaDogMwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB0bzogewogICAgICAgICAgICAgICAgICAgIGxpbmU6IGZvdW5kU3RhcnQsCiAgICAgICAgICAgICAgICAgICAgY2g6IDEwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHRleHQ6ICdFZGl0IERpYWdyYW0nLAogICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldikgewogICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmNtLmRvYy5zZXRTZWxlY3Rpb24oewogICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBzdGFydCwKICAgICAgICAgICAgICAgICAgICAgICAgY2g6IDAKICAgICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogZW5kLAogICAgICAgICAgICAgICAgICAgICAgICBjaDogMwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3ID0gX3RoaXMzLmNtLmRvYy5nZXRMaW5lKGVuZCAtIDEpOwogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuJHN0b3JlLnNldCgnZWRpdG9yL2FjdGl2ZU1vZGFsRGF0YScsIEJ1ZmZlci5mcm9tKHJhdywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCkpOwogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMudG9nZ2xlTW9kYWwoImVkaXRvck1vZGFsRHJhd2lvIik7CiAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy4kc3RvcmUuY29tbWl0KCdzaG93Tm90aWZpY2F0aW9uJywgewogICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gcHJvY2VzcyBkaWFncmFtIGRhdGEuJywKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ3dhcm5pbmcnLAogICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICd3YXJuaW5nJwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICB9KGZvdW5kU3RhcnQsIGxpbmUpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChsbi5oZWlnaHQgPiAwKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzMy5jbS5mb2xkQ29kZShmb3VuZFN0YXJ0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZvdW5kID0gbnVsbDsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGFkZE1hcmtlcjogZnVuY3Rpb24gYWRkTWFya2VyKF9yZWY2KSB7CiAgICAgIHZhciBraW5kID0gX3JlZjYua2luZCwKICAgICAgICBmcm9tID0gX3JlZjYuZnJvbSwKICAgICAgICB0byA9IF9yZWY2LnRvLAogICAgICAgIHRleHQgPSBfcmVmNi50ZXh0LAogICAgICAgIGFjdGlvbiA9IF9yZWY2LmFjdGlvbjsKICAgICAgdmFyIG1hcmtlckVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgbWFya2VyRWxtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpKTsKICAgICAgbWFya2VyRWxtLmNsYXNzTmFtZSA9ICdDb2RlTWlycm9yLWJ1dHRvbm1hcmtlcic7CiAgICAgIG1hcmtlckVsbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFjdGlvbik7CiAgICAgIHRoaXMuY20ubWFya1RleHQoZnJvbSwgdG8sIHsKICAgICAgICByZXBsYWNlZFdpdGg6IG1hcmtlckVsbSwKICAgICAgICBfX2tpbmQ6IGtpbmQKICAgICAgfSk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzNCA9IHRoaXM7CiAgICB0aGlzLiRzdG9yZS5zZXQoJ2VkaXRvci9lZGl0b3JLZXknLCAnYXNjaWlkb2MnKTsKICAgIGlmICh0aGlzLm1vZGUgPT09ICdjcmVhdGUnKSB7CiAgICAgIHRoaXMuJHN0b3JlLnNldCgnZWRpdG9yL2NvbnRlbnQnLCAnPT0gaGVhZGVyXG5cbmNvbnRlbnQnKTsKICAgIH0KCiAgICAvLyBJbml0aWFsaXplIENvZGVNaXJyb3IKCiAgICB0aGlzLmNtID0gQ29kZU1pcnJvci5mcm9tVGV4dEFyZWEodGhpcy4kcmVmcy5jbSwgewogICAgICB0YWJTaXplOiAyLAogICAgICBtb2RlOiAnYXNjaWlkb2MnLAogICAgICB0aGVtZTogJ3dpa2lqcy1kYXJrJywKICAgICAgbGluZU51bWJlcnM6IHRydWUsCiAgICAgIGxpbmVXcmFwcGluZzogdHJ1ZSwKICAgICAgbGluZTogdHJ1ZSwKICAgICAgc3R5bGVBY3RpdmVMaW5lOiB0cnVlLAogICAgICBoaWdobGlnaHRTZWxlY3Rpb25NYXRjaGVzOiB7CiAgICAgICAgYW5ub3RhdGVTY3JvbGxiYXI6IHRydWUKICAgICAgfSwKICAgICAgdmlld3BvcnRNYXJnaW46IDUwLAogICAgICBpbnB1dFN0eWxlOiAnY29udGVudGVkaXRhYmxlJywKICAgICAgYWxsb3dEcm9wRmlsZVR5cGVzOiBbJ2ltYWdlL2pwZycsICdpbWFnZS9wbmcnLCAnaW1hZ2Uvc3ZnJywgJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvZ2lmJ10sCiAgICAgIGRpcmVjdGlvbjogc2l0ZUNvbmZpZy5ydGwgPyAncnRsJyA6ICdsdHInLAogICAgICBmb2xkR3V0dGVyOiB0cnVlLAogICAgICBndXR0ZXJzOiBbJ0NvZGVNaXJyb3ItbGluZW51bWJlcnMnLCAnQ29kZU1pcnJvci1mb2xkZ3V0dGVyJ10KICAgIH0pOwogICAgdGhpcy5jbS5zZXRWYWx1ZSh0aGlzLiRzdG9yZS5nZXQoJ2VkaXRvci9jb250ZW50JykpOwogICAgdGhpcy5jbS5vbignY2hhbmdlJywgZnVuY3Rpb24gKGMpIHsKICAgICAgX3RoaXM0LiRzdG9yZS5zZXQoJ2VkaXRvci9jb250ZW50JywgYy5nZXRWYWx1ZSgpKTsKICAgICAgX3RoaXM0Lm9uQ21JbnB1dChfdGhpczQuJHN0b3JlLmdldCgnZWRpdG9yL2NvbnRlbnQnKSk7CiAgICB9KTsKICAgIGlmICh0aGlzLiR2dWV0aWZ5LmJyZWFrcG9pbnQubWRBbmRVcCkgewogICAgICB0aGlzLmNtLnNldFNpemUobnVsbCwgJ2NhbGMoMTAwdmggLSAxMzdweCknKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuY20uc2V0U2l6ZShudWxsLCAnY2FsYygxMDB2aCAtIDExMnB4IC0gMTZweCknKTsKICAgIH0KCiAgICAvLyBTZXQgS2V5YmluZGluZ3MKCiAgICB2YXIga2V5QmluZGluZ3MgPSB7CiAgICAgICdGMTEnOiBmdW5jdGlvbiBGMTEoYykgewogICAgICAgIGMuc2V0T3B0aW9uKCdmdWxsU2NyZWVuJywgIWMuZ2V0T3B0aW9uKCdmdWxsU2NyZWVuJykpOwogICAgICB9LAogICAgICAnRXNjJzogZnVuY3Rpb24gRXNjKGMpIHsKICAgICAgICBpZiAoYy5nZXRPcHRpb24oJ2Z1bGxTY3JlZW4nKSkgYy5zZXRPcHRpb24oJ2Z1bGxTY3JlZW4nLCBmYWxzZSk7CiAgICAgIH0KICAgIH07CiAgICBfc2V0KGtleUJpbmRpbmdzLCBDdHJsS2V5ICsgIi1CIiwgZnVuY3Rpb24gKGMpIHsKICAgICAgX3RoaXM0LnRvZ2dsZU1hcmt1cCh7CiAgICAgICAgc3RhcnQ6ICIqKiIKICAgICAgfSk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0pOwogICAgX3NldChrZXlCaW5kaW5ncywgQ3RybEtleSArICItSSIsIGZ1bmN0aW9uIChjKSB7CiAgICAgIF90aGlzNC50b2dnbGVNYXJrdXAoewogICAgICAgIHN0YXJ0OiAiX18iCiAgICAgIH0pOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9KTsKICAgIHRoaXMuY20uc2V0T3B0aW9uKCdleHRyYUtleXMnLCBrZXlCaW5kaW5ncyk7CgogICAgLy8gSGFuZGxlIGN1cnNvciBtb3ZlbWVudAoKICAgIHRoaXMuY20ub24oJ2N1cnNvckFjdGl2aXR5JywgZnVuY3Rpb24gKGMpIHsKICAgICAgX3RoaXM0LnBvc2l0aW9uU3luYyhjKTsKICAgIH0pOwoKICAgIC8vIFJlbmRlciBpbml0aWFsIHByZXZpZXcKICAgIHRoaXMucHJvY2Vzc0NvbnRlbnQodGhpcy4kc3RvcmUuZ2V0KCdlZGl0b3IvY29udGVudCcpKTsKICAgIHRoaXMuJHJvb3QuJG9uKCdlZGl0b3JJbnNlcnQnLCBmdW5jdGlvbiAob3B0cykgewogICAgICBzd2l0Y2ggKG9wdHMua2luZCkgewogICAgICAgIGNhc2UgJ0lNQUdFJzoKICAgICAgICAgIHZhciBpbWcgPSAiaW1hZ2U6OiIgKyBvcHRzLnBhdGggKyAiWyIgKyBvcHRzLnRleHQgKyAiXSI7CiAgICAgICAgICBfdGhpczQuaW5zZXJ0QXRDdXJzb3IoewogICAgICAgICAgICBjb250ZW50OiBpbWcKICAgICAgICAgIH0pOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnQklOQVJZJzoKICAgICAgICAgIF90aGlzNC5pbnNlcnRBdEN1cnNvcih7CiAgICAgICAgICAgIGNvbnRlbnQ6ICJsaW5rOiIgKyBvcHRzLnBhdGggKyAiWyIgKyBvcHRzLnRleHQgKyAiXSIKICAgICAgICAgIH0pOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnRElBR1JBTSc6CiAgICAgICAgICB2YXIgc2VsU3RhcnRMaW5lID0gX3RoaXM0LmNtLmdldEN1cnNvcignZnJvbScpLmxpbmU7CiAgICAgICAgICB2YXIgc2VsRW5kTGluZSA9IF90aGlzNC5jbS5nZXRDdXJzb3IoJ3RvJykubGluZSArIDE7CiAgICAgICAgICBfdGhpczQuY20uZG9jLnJlcGxhY2VTZWxlY3Rpb24oJ2BgYGRpYWdyYW1cbicgKyBvcHRzLnRleHQgKyAnXG5gYGBcbicsICdzdGFydCcpOwogICAgICAgICAgX3RoaXM0LnByb2Nlc3NNYXJrZXJzKHNlbFN0YXJ0TGluZSwgc2VsRW5kTGluZSk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfSk7CgogICAgLy8gSGFuZGxlIHNhdmUgY29uZmxpY3QKICAgIHRoaXMuJHJvb3QuJG9uKCdzYXZlQ29uZmxpY3QnLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzNC50b2dnbGVNb2RhbCgiZWRpdG9yTW9kYWxDb25mbGljdCIpOwogICAgfSk7CiAgICB0aGlzLiRyb290LiRvbignb3ZlcndyaXRlRWRpdG9yQ29udGVudCcsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXM0LmNtLnNldFZhbHVlKF90aGlzNC4kc3RvcmUuZ2V0KCdlZGl0b3IvY29udGVudCcpKTsKICAgIH0pOwogIH0sCiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHsKICAgIHRoaXMuJHJvb3QuJG9mZignZWRpdG9ySW5zZXJ0Jyk7CiAgfQp9Ow=="},null]}