{"remainingRequest":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js??ref--0-1!/Users/shanebeal/Desktop/bodewiki/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shanebeal/Desktop/bodewiki/client/components/common/nav-header.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shanebeal/Desktop/bodewiki/client/components/common/nav-header.vue","mtime":1742769082000},{"path":"/Users/shanebeal/Desktop/bodewiki/.babelrc","mtime":1742797763162},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/cache-loader/dist/cjs.js","mtime":1742797622487},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js","mtime":1742797622325},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/vue-loader/lib/index.js","mtime":1742797627417}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}