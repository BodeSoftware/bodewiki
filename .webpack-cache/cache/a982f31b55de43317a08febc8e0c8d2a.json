{"remainingRequest":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js??ref--0-1!/Users/shanebeal/Desktop/bodewiki/node_modules/vuetify/lib/services/theme/index.js","dependencies":[{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/vuetify/lib/services/theme/index.js","mtime":1742797627551},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/cache-loader/dist/cjs.js","mtime":1742797622487},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js","mtime":1742797622325}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0KCi8qIGVzbGludC1kaXNhYmxlIG5vLW11bHRpLXNwYWNlcyAqLwovLyBFeHRlbnNpb25zCmltcG9ydCB7IFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlJzsgLy8gVXRpbGl0aWVzCgppbXBvcnQgKiBhcyBUaGVtZVV0aWxzIGZyb20gJy4vdXRpbHMnOwppbXBvcnQgeyBnZXROZXN0ZWRWYWx1ZSB9IGZyb20gJy4uLy4uL3V0aWwvaGVscGVycyc7IC8vIFR5cGVzCgppbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7CmV4cG9ydCB2YXIgVGhlbWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TZXJ2aWNlKSB7CiAgX2luaGVyaXRzTG9vc2UoVGhlbWUsIF9TZXJ2aWNlKTsKCiAgZnVuY3Rpb24gVGhlbWUocHJlc2V0KSB7CiAgICB2YXIgX3RoaXM7CgogICAgX3RoaXMgPSBfU2VydmljZS5jYWxsKHRoaXMpIHx8IHRoaXM7CiAgICBfdGhpcy5kaXNhYmxlZCA9IGZhbHNlOwogICAgX3RoaXMuaXNEYXJrID0gbnVsbDsKICAgIF90aGlzLnVud2F0Y2ggPSBudWxsOwogICAgX3RoaXMudnVlTWV0YSA9IG51bGw7CiAgICB2YXIgX3ByZXNldCRUaGVtZSRwcm9wZXJ0ID0gcHJlc2V0W1RoZW1lLnByb3BlcnR5XSwKICAgICAgICBkYXJrID0gX3ByZXNldCRUaGVtZSRwcm9wZXJ0LmRhcmssCiAgICAgICAgZGlzYWJsZSA9IF9wcmVzZXQkVGhlbWUkcHJvcGVydC5kaXNhYmxlLAogICAgICAgIG9wdGlvbnMgPSBfcHJlc2V0JFRoZW1lJHByb3BlcnQub3B0aW9ucywKICAgICAgICB0aGVtZXMgPSBfcHJlc2V0JFRoZW1lJHByb3BlcnQudGhlbWVzOwogICAgX3RoaXMuZGFyayA9IEJvb2xlYW4oZGFyayk7CiAgICBfdGhpcy5kZWZhdWx0cyA9IF90aGlzLnRoZW1lcyA9IHRoZW1lczsKICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zOwoKICAgIGlmIChkaXNhYmxlKSB7CiAgICAgIF90aGlzLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpOwogICAgfQoKICAgIF90aGlzLnRoZW1lcyA9IHsKICAgICAgZGFyazogX3RoaXMuZmlsbFZhcmlhbnQodGhlbWVzLmRhcmssIHRydWUpLAogICAgICBsaWdodDogX3RoaXMuZmlsbFZhcmlhbnQodGhlbWVzLmxpZ2h0LCBmYWxzZSkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfSAvLyBXaGVuIHNldHRpbmcgY3NzLCBjaGVjayBmb3IgZWxlbWVudCBhbmQgYXBwbHkgbmV3IHZhbHVlcwoKICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYWNjZXNzb3ItcGFpcnMgKi8KCgogIHZhciBfcHJvdG8gPSBUaGVtZS5wcm90b3R5cGU7CgogIC8vIEFwcGx5IGN1cnJlbnQgdGhlbWUgZGVmYXVsdAogIC8vIG9ubHkgY2FsbGVkIG9uIGNsaWVudCBzaWRlCiAgX3Byb3RvLmFwcGx5VGhlbWUgPSBmdW5jdGlvbiBhcHBseVRoZW1lKCkgewogICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybiB0aGlzLmNsZWFyQ3NzKCk7CiAgICB0aGlzLmNzcyA9IHRoaXMuZ2VuZXJhdGVkU3R5bGVzOwogIH07CgogIF9wcm90by5jbGVhckNzcyA9IGZ1bmN0aW9uIGNsZWFyQ3NzKCkgewogICAgdGhpcy5jc3MgPSAnJzsKICB9IC8vIEluaXRpYWxpemUgdGhlbWUgZm9yIFNTUiBhbmQgU1BBCiAgLy8gQXR0YWNoIHRvIHNzckNvbnRleHQgaGVhZCBvcgogIC8vIGFwcGx5IG5ldyB0aGVtZSB0byBkb2N1bWVudAogIDsKCiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KHJvb3QsIHNzckNvbnRleHQpIHsKICAgIGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm47CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqLwoKICAgIGlmIChyb290LiRtZXRhKSB7CiAgICAgIHRoaXMuaW5pdFZ1ZU1ldGEocm9vdCk7CiAgICB9IGVsc2UgaWYgKHNzckNvbnRleHQpIHsKICAgICAgdGhpcy5pbml0U1NSKHNzckNvbnRleHQpOwogICAgfQoKICAgIHRoaXMuaW5pdFRoZW1lKHJvb3QpOwogIH0gLy8gQWxsb3dzIGZvciB5b3UgdG8gc2V0IHRhcmdldCB0aGVtZQogIDsKCiAgX3Byb3RvLnNldFRoZW1lID0gZnVuY3Rpb24gc2V0VGhlbWUodGhlbWUsIHZhbHVlKSB7CiAgICB0aGlzLnRoZW1lc1t0aGVtZV0gPSBPYmplY3QuYXNzaWduKHRoaXMudGhlbWVzW3RoZW1lXSwgdmFsdWUpOwogICAgdGhpcy5hcHBseVRoZW1lKCk7CiAgfSAvLyBSZXNldCB0aGVtZSBkZWZhdWx0cwogIDsKCiAgX3Byb3RvLnJlc2V0VGhlbWVzID0gZnVuY3Rpb24gcmVzZXRUaGVtZXMoKSB7CiAgICB0aGlzLnRoZW1lcy5saWdodCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdHMubGlnaHQpOwogICAgdGhpcy50aGVtZXMuZGFyayA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdHMuZGFyayk7CiAgICB0aGlzLmFwcGx5VGhlbWUoKTsKICB9IC8vIENoZWNrIGZvciBleGlzdGVuY2Ugb2Ygc3R5bGUgZWxlbWVudAogIDsKCiAgX3Byb3RvLmNoZWNrT3JDcmVhdGVTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiBjaGVja09yQ3JlYXRlU3R5bGVFbGVtZW50KCkgewogICAgdGhpcy5zdHlsZUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Z1ZXRpZnktdGhlbWUtc3R5bGVzaGVldCcpOwogICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KCiAgICBpZiAodGhpcy5zdHlsZUVsKSByZXR1cm4gdHJ1ZTsKICAgIHRoaXMuZ2VuU3R5bGVFbGVtZW50KCk7IC8vIElmIGRvZXNuJ3QgaGF2ZSBpdCwgY3JlYXRlIGl0CgogICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdHlsZUVsKTsKICB9OwoKICBfcHJvdG8uZmlsbFZhcmlhbnQgPSBmdW5jdGlvbiBmaWxsVmFyaWFudCh0aGVtZSwgZGFyaykgewogICAgaWYgKHRoZW1lID09PSB2b2lkIDApIHsKICAgICAgdGhlbWUgPSB7fTsKICAgIH0KCiAgICB2YXIgZGVmYXVsdFRoZW1lID0gdGhpcy50aGVtZXNbZGFyayA/ICdkYXJrJyA6ICdsaWdodCddOwogICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRUaGVtZSwgdGhlbWUpOwogIH0gLy8gR2VuZXJhdGUgdGhlIHN0eWxlIGVsZW1lbnQKICAvLyBpZiBhcHBsaWNhYmxlCiAgOwoKICBfcHJvdG8uZ2VuU3R5bGVFbGVtZW50ID0gZnVuY3Rpb24gZ2VuU3R5bGVFbGVtZW50KCkgewogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgcmV0dXJuOwogICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KCiAgICB0aGlzLnN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgdGhpcy5zdHlsZUVsLnR5cGUgPSAndGV4dC9jc3MnOwogICAgdGhpcy5zdHlsZUVsLmlkID0gJ3Z1ZXRpZnktdGhlbWUtc3R5bGVzaGVldCc7CgogICAgaWYgKHRoaXMub3B0aW9ucy5jc3BOb25jZSkgewogICAgICB0aGlzLnN0eWxlRWwuc2V0QXR0cmlidXRlKCdub25jZScsIHRoaXMub3B0aW9ucy5jc3BOb25jZSk7CiAgICB9CgogICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlRWwpOwogIH07CgogIF9wcm90by5pbml0VnVlTWV0YSA9IGZ1bmN0aW9uIGluaXRWdWVNZXRhKHJvb3QpIHsKICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgIHRoaXMudnVlTWV0YSA9IHJvb3QuJG1ldGEoKTsKCiAgICBpZiAodGhpcy5pc1Z1ZU1ldGEyMykgewogICAgICAvLyB2dWUtbWV0YSBuZWVkcyB0byBhcHBseSBhZnRlciBtb3VudGVkKCkKICAgICAgcm9vdC4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMi5hcHBseVZ1ZU1ldGEyMygpOwogICAgICB9KTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBtZXRhS2V5TmFtZSA9IHR5cGVvZiB0aGlzLnZ1ZU1ldGEuZ2V0T3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMudnVlTWV0YS5nZXRPcHRpb25zKCkua2V5TmFtZSA6ICdtZXRhSW5mbyc7CiAgICB2YXIgbWV0YUluZm8gPSByb290LiRvcHRpb25zW21ldGFLZXlOYW1lXSB8fCB7fTsKCiAgICByb290LiRvcHRpb25zW21ldGFLZXlOYW1lXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgbWV0YUluZm8uc3R5bGUgPSBtZXRhSW5mby5zdHlsZSB8fCBbXTsKICAgICAgdmFyIHZ1ZXRpZnlTdHlsZXNoZWV0ID0gbWV0YUluZm8uc3R5bGUuZmluZChmdW5jdGlvbiAocykgewogICAgICAgIHJldHVybiBzLmlkID09PSAndnVldGlmeS10aGVtZS1zdHlsZXNoZWV0JzsKICAgICAgfSk7CgogICAgICBpZiAoIXZ1ZXRpZnlTdHlsZXNoZWV0KSB7CiAgICAgICAgbWV0YUluZm8uc3R5bGUucHVzaCh7CiAgICAgICAgICBjc3NUZXh0OiBfdGhpczIuZ2VuZXJhdGVkU3R5bGVzLAogICAgICAgICAgdHlwZTogJ3RleHQvY3NzJywKICAgICAgICAgIGlkOiAndnVldGlmeS10aGVtZS1zdHlsZXNoZWV0JywKICAgICAgICAgIG5vbmNlOiAoX3RoaXMyLm9wdGlvbnMgfHwge30pLmNzcE5vbmNlCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdnVldGlmeVN0eWxlc2hlZXQuY3NzVGV4dCA9IF90aGlzMi5nZW5lcmF0ZWRTdHlsZXM7CiAgICAgIH0KCiAgICAgIHJldHVybiBtZXRhSW5mbzsKICAgIH07CiAgfTsKCiAgX3Byb3RvLmFwcGx5VnVlTWV0YTIzID0gZnVuY3Rpb24gYXBwbHlWdWVNZXRhMjMoKSB7CiAgICB2YXIgX3RoaXMkdnVlTWV0YSRhZGRBcHAgPSB0aGlzLnZ1ZU1ldGEuYWRkQXBwKCd2dWV0aWZ5JyksCiAgICAgICAgc2V0ID0gX3RoaXMkdnVlTWV0YSRhZGRBcHAuc2V0OwoKICAgIHNldCh7CiAgICAgIHN0eWxlOiBbewogICAgICAgIGNzc1RleHQ6IHRoaXMuZ2VuZXJhdGVkU3R5bGVzLAogICAgICAgIHR5cGU6ICd0ZXh0L2NzcycsCiAgICAgICAgaWQ6ICd2dWV0aWZ5LXRoZW1lLXN0eWxlc2hlZXQnLAogICAgICAgIG5vbmNlOiB0aGlzLm9wdGlvbnMuY3NwTm9uY2UKICAgICAgfV0KICAgIH0pOwogIH07CgogIF9wcm90by5pbml0U1NSID0gZnVuY3Rpb24gaW5pdFNTUihzc3JDb250ZXh0KSB7CiAgICAvLyBTU1IKICAgIHZhciBub25jZSA9IHRoaXMub3B0aW9ucy5jc3BOb25jZSA/ICIgbm9uY2U9XCIiICsgdGhpcy5vcHRpb25zLmNzcE5vbmNlICsgIlwiIiA6ICcnOwogICAgc3NyQ29udGV4dC5oZWFkID0gc3NyQ29udGV4dC5oZWFkIHx8ICcnOwogICAgc3NyQ29udGV4dC5oZWFkICs9ICI8c3R5bGUgdHlwZT1cInRleHQvY3NzXCIgaWQ9XCJ2dWV0aWZ5LXRoZW1lLXN0eWxlc2hlZXRcIiIgKyBub25jZSArICI+IiArIHRoaXMuZ2VuZXJhdGVkU3R5bGVzICsgIjwvc3R5bGU+IjsKICB9OwoKICBfcHJvdG8uaW5pdFRoZW1lID0gZnVuY3Rpb24gaW5pdFRoZW1lKHJvb3QpIHsKICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgIC8vIE9ubHkgd2F0Y2ggZm9yIHJlYWN0aXZpdHkgb24gY2xpZW50IHNpZGUKICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSByZXR1cm47IC8vIElmIHdlIGdldCBoZXJlIHNvbWVob3csIGVuc3VyZQogICAgLy8gZXhpc3RpbmcgaW5zdGFuY2UgaXMgcmVtb3ZlZAoKICAgIGlmICh0aGlzLnVud2F0Y2gpIHsKICAgICAgdGhpcy51bndhdGNoKCk7CiAgICAgIHRoaXMudW53YXRjaCA9IG51bGw7CiAgICB9IC8vIFRPRE86IFVwZGF0ZSB0byB1c2UgUkZDIGlmIG1lcmdlZAogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JmY3MvYmxvYi9hZHZhbmNlZC1yZWFjdGl2aXR5LWFwaS9hY3RpdmUtcmZjcy8wMDAwLWFkdmFuY2VkLXJlYWN0aXZpdHktYXBpLm1kCgoKICAgIHJvb3QuJG9uY2UoJ2hvb2s6Y3JlYXRlZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIG9icyA9IFZ1ZS5vYnNlcnZhYmxlKHsKICAgICAgICB0aGVtZXM6IF90aGlzMy50aGVtZXMKICAgICAgfSk7CiAgICAgIF90aGlzMy51bndhdGNoID0gcm9vdC4kd2F0Y2goZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBvYnMudGhlbWVzOwogICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMy5hcHBseVRoZW1lKCk7CiAgICAgIH0sIHsKICAgICAgICBkZWVwOiB0cnVlCiAgICAgIH0pOwogICAgfSk7CiAgICB0aGlzLmFwcGx5VGhlbWUoKTsKICB9OwoKICBfY3JlYXRlQ2xhc3MoVGhlbWUsIFt7CiAgICBrZXk6ICJjc3MiLAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7CiAgICAgIGlmICh0aGlzLnZ1ZU1ldGEpIHsKICAgICAgICBpZiAodGhpcy5pc1Z1ZU1ldGEyMykgewogICAgICAgICAgdGhpcy5hcHBseVZ1ZU1ldGEyMygpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLmNoZWNrT3JDcmVhdGVTdHlsZUVsZW1lbnQoKSAmJiAodGhpcy5zdHlsZUVsLmlubmVySFRNTCA9IHZhbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGFyayIsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHsKICAgICAgdmFyIG9sZERhcmsgPSB0aGlzLmlzRGFyazsKICAgICAgdGhpcy5pc0RhcmsgPSB2YWw7IC8vIE9ubHkgYXBwbHkgdGhlbWUgYWZ0ZXIgZGFyawogICAgICAvLyBoYXMgYWxyZWFkeSBiZWVuIHNldCBiZWZvcmUKCiAgICAgIG9sZERhcmsgIT0gbnVsbCAmJiB0aGlzLmFwcGx5VGhlbWUoKTsKICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5pc0RhcmspOwogICAgfQogIH0sIHsKICAgIGtleTogImN1cnJlbnRUaGVtZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIHRhcmdldCA9IHRoaXMuZGFyayA/ICdkYXJrJyA6ICdsaWdodCc7CiAgICAgIHJldHVybiB0aGlzLnRoZW1lc1t0YXJnZXRdOwogICAgfQogIH0sIHsKICAgIGtleTogImdlbmVyYXRlZFN0eWxlcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIHRoZW1lID0gdGhpcy5wYXJzZWRUaGVtZTsKICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KCiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9OwogICAgICB2YXIgY3NzOwoKICAgICAgaWYgKG9wdGlvbnMudGhlbWVDYWNoZSAhPSBudWxsKSB7CiAgICAgICAgY3NzID0gb3B0aW9ucy50aGVtZUNhY2hlLmdldCh0aGVtZSk7CiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgogICAgICAgIGlmIChjc3MgIT0gbnVsbCkgcmV0dXJuIGNzczsKICAgICAgfQoKICAgICAgY3NzID0gVGhlbWVVdGlscy5nZW5TdHlsZXModGhlbWUsIG9wdGlvbnMuY3VzdG9tUHJvcGVydGllcyk7CgogICAgICBpZiAob3B0aW9ucy5taW5pZnlUaGVtZSAhPSBudWxsKSB7CiAgICAgICAgY3NzID0gb3B0aW9ucy5taW5pZnlUaGVtZShjc3MpOwogICAgICB9CgogICAgICBpZiAob3B0aW9ucy50aGVtZUNhY2hlICE9IG51bGwpIHsKICAgICAgICBvcHRpb25zLnRoZW1lQ2FjaGUuc2V0KHRoZW1lLCBjc3MpOwogICAgICB9CgogICAgICByZXR1cm4gY3NzOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlZFRoZW1lIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gVGhlbWVVdGlscy5wYXJzZSh0aGlzLmN1cnJlbnRUaGVtZSB8fCB7fSwgdW5kZWZpbmVkLCBnZXROZXN0ZWRWYWx1ZSh0aGlzLm9wdGlvbnMsIFsndmFyaWF0aW9ucyddLCB0cnVlKSk7CiAgICB9IC8vIElzIHVzaW5nIHYyLjMgb2YgdnVlLW1ldGEKICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9udXh0L3Z1ZS1tZXRhL3JlbGVhc2VzL3RhZy92Mi4zLjAKCiAgfSwgewogICAga2V5OiAiaXNWdWVNZXRhMjMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy52dWVNZXRhLmFkZEFwcCA9PT0gJ2Z1bmN0aW9uJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBUaGVtZTsKfShTZXJ2aWNlKTsKVGhlbWUucHJvcGVydHkgPSAndGhlbWUnOw=="},null]}