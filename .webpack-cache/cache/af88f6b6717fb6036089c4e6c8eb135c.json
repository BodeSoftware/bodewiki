{"remainingRequest":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js??ref--0-1!/Users/shanebeal/Desktop/bodewiki/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shanebeal/Desktop/bodewiki/client/components/editor/editor-modal-properties.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shanebeal/Desktop/bodewiki/client/components/editor/editor-modal-properties.vue","mtime":1742769082000},{"path":"/Users/shanebeal/Desktop/bodewiki/.babelrc","mtime":1742797763162},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/cache-loader/dist/cjs.js","mtime":1742846258556},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js","mtime":1742846259254},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/vue-loader/lib/index.js","mtime":1742846259543}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9pc0VtcHR5IGZyb20gImxvZGFzaC9pc0VtcHR5IjsKaW1wb3J0IF9nZXQgZnJvbSAibG9kYXNoL2dldCI7CmltcG9ydCBfd2l0aG91dCBmcm9tICJsb2Rhc2gvd2l0aG91dCI7CmltcG9ydCBfaW5jbHVkZXMgZnJvbSAibG9kYXNoL2luY2x1ZGVzIjsKaW1wb3J0IF90cmltIGZyb20gImxvZGFzaC90cmltIjsKaW1wb3J0IF9kZWxheSBmcm9tICJsb2Rhc2gvZGVsYXkiOyAvLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBzeW5jLCBnZXQgfSBmcm9tICd2dWV4LXBhdGhpZnknOwppbXBvcnQgQ29kZU1pcnJvciBmcm9tICdjb2RlbWlycm9yJzsKaW1wb3J0ICdjb2RlbWlycm9yL2xpYi9jb2RlbWlycm9yLmNzcyc7CmltcG9ydCAnY29kZW1pcnJvci9tb2RlL2h0bWxtaXhlZC9odG1sbWl4ZWQuanMnOwppbXBvcnQgJ2NvZGVtaXJyb3IvbW9kZS9jc3MvY3NzLmpzJzsKCi8qIGdsb2JhbCBzaXRlTGFuZ3MsIHNpdGVDb25maWcgKi8KdmFyIGZpbGVuYW1lUGF0dGVybiA9IC9eKD8hW1wjXC9cLlwkXF5cPVwqXDtcOlwmXD9cKFwpXFtcXVx7XH1cIlwnXD5cPFwsXEBcIVwlXGBcflxzXSkoPyEuKltcI1wvXC5cJFxeXD1cKlw7XDpcJlw/XChcKVxbXF1ce1x9XCJcJ1w+XDxcLFxAXCFcJVxgXH5cc10kKVteXCNcLlwkXF5cPVwqXDtcOlwmXD9cKFwpXFtcXVx7XH1cIlwnXD5cPFwsXEBcIVwlXGBcflxzXSokLzsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICB2YWx1ZTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGlzUHVibGlzaFN0YXJ0U2hvd246IGZhbHNlLAogICAgICBpc1B1Ymxpc2hFbmRTaG93bjogZmFsc2UsCiAgICAgIHBhZ2VTZWxlY3RvclNob3duOiBmYWxzZSwKICAgICAgbmFtZXNwYWNlczogc2l0ZUxhbmdzLmxlbmd0aCA/IHNpdGVMYW5ncy5tYXAoZnVuY3Rpb24gKG5zKSB7CiAgICAgICAgcmV0dXJuIG5zLmNvZGU7CiAgICAgIH0pIDogW3NpdGVDb25maWcubGFuZ10sCiAgICAgIG5ld1RhZzogJycsCiAgICAgIG5ld1RhZ1N1Z2dlc3Rpb25zOiBbXSwKICAgICAgbmV3VGFnU2VhcmNoOiAnJywKICAgICAgY3VycmVudFRhYjogMCwKICAgICAgY206IG51bGwsCiAgICAgIHJ1bGVzOiB7CiAgICAgICAgcmVxdWlyZWQ6IGZ1bmN0aW9uIHJlcXVpcmVkKHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gISF2YWx1ZSB8fCAnVGhpcyBmaWVsZCBpcyByZXF1aXJlZC4nOwogICAgICAgIH0sCiAgICAgICAgcGF0aDogZnVuY3Rpb24gcGF0aCh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIGZpbGVuYW1lUGF0dGVybi50ZXN0KHZhbHVlKSB8fCAnSW52YWxpZCBwYXRoLiBQbGVhc2UgZW5zdXJlIGl0IGRvZXMgbm90IGNvbnRhaW4gc3BlY2lhbCBjaGFyYWN0ZXJzLCBvciBiZWdpbi9lbmQgaW4gYSBzbGFzaCBvciBoYXNodGFnIHN0cmluZy4nOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBpc1Nob3duOiB7CiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLnZhbHVlOwogICAgICB9LAogICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHsKICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHZhbCk7CiAgICAgIH0KICAgIH0sCiAgICBtb2RlOiBnZXQoJ2VkaXRvci9tb2RlJyksCiAgICB0aXRsZTogc3luYygncGFnZS90aXRsZScpLAogICAgZGVzY3JpcHRpb246IHN5bmMoJ3BhZ2UvZGVzY3JpcHRpb24nKSwKICAgIGxvY2FsZTogc3luYygncGFnZS9sb2NhbGUnKSwKICAgIHRhZ3M6IHN5bmMoJ3BhZ2UvdGFncycpLAogICAgcGF0aDogc3luYygncGFnZS9wYXRoJyksCiAgICBpc1B1Ymxpc2hlZDogc3luYygncGFnZS9pc1B1Ymxpc2hlZCcpLAogICAgcHVibGlzaFN0YXJ0RGF0ZTogc3luYygncGFnZS9wdWJsaXNoU3RhcnREYXRlJyksCiAgICBwdWJsaXNoRW5kRGF0ZTogc3luYygncGFnZS9wdWJsaXNoRW5kRGF0ZScpLAogICAgc2NyaXB0SnM6IHN5bmMoJ3BhZ2Uvc2NyaXB0SnMnKSwKICAgIHNjcmlwdENzczogc3luYygncGFnZS9zY3JpcHRDc3MnKSwKICAgIGhhc1NjcmlwdFBlcm1pc3Npb246IGdldCgncGFnZS9lZmZlY3RpdmVQZXJtaXNzaW9uc0BwYWdlcy5zY3JpcHQnKSwKICAgIGhhc1N0eWxlUGVybWlzc2lvbjogZ2V0KCdwYWdlL2VmZmVjdGl2ZVBlcm1pc3Npb25zQHBhZ2VzLnN0eWxlJyksCiAgICBwYWdlU2VsZWN0b3JNb2RlOiBmdW5jdGlvbiBwYWdlU2VsZWN0b3JNb2RlKCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlID09PSAnY3JlYXRlJyA/ICdjcmVhdGUnIDogJ21vdmUnOwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgaWYgKG5ld1ZhbHVlKSB7CiAgICAgICAgX2RlbGF5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzLiRyZWZzLmlwdFRpdGxlLmZvY3VzKCk7CiAgICAgICAgfSwgNTAwKTsKICAgICAgfQogICAgfSwKICAgIG5ld1RhZzogZnVuY3Rpb24gbmV3VGFnKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKICAgICAgdmFyIHRhZ0NsZWFuID0gX3RyaW0obmV3VmFsdWUgfHwgJycpLnRvTG93ZXJDYXNlKCk7CiAgICAgIGlmICh0YWdDbGVhbiAmJiB0YWdDbGVhbi5sZW5ndGggPiAwKSB7CiAgICAgICAgaWYgKCFfaW5jbHVkZXModGhpcy50YWdzLCB0YWdDbGVhbikpIHsKICAgICAgICAgIHRoaXMudGFncyA9IFtdLmNvbmNhdCh0aGlzLnRhZ3MsIFt0YWdDbGVhbl0pOwogICAgICAgIH0KICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczIubmV3VGFnID0gbnVsbDsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGN1cnJlbnRUYWI6IGZ1bmN0aW9uIGN1cnJlbnRUYWIobmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwogICAgICBpZiAodGhpcy5jbSkgewogICAgICAgIHRoaXMuY20udG9UZXh0QXJlYSgpOwogICAgICB9CiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gMikgewogICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczMubG9hZEVkaXRvcihfdGhpczMuJHJlZnMuY29kZWpzLCAnaHRtbCcpOwogICAgICAgICAgfSwgMTAwKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmIChuZXdWYWx1ZSA9PT0gNCkgewogICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczMubG9hZEVkaXRvcihfdGhpczMuJHJlZnMuY29kZWNzcywgJ2NzcycpOwogICAgICAgICAgfSwgMTAwKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgcmVtb3ZlVGFnOiBmdW5jdGlvbiByZW1vdmVUYWcodGFnKSB7CiAgICAgIHRoaXMudGFncyA9IF93aXRob3V0KHRoaXMudGFncywgdGFnKTsKICAgIH0sCiAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgIHRoaXMuaXNTaG93biA9IGZhbHNlOwogICAgfSwKICAgIHNob3dQYXRoU2VsZWN0b3I6IGZ1bmN0aW9uIHNob3dQYXRoU2VsZWN0b3IoKSB7CiAgICAgIHRoaXMucGFnZVNlbGVjdG9yU2hvd24gPSB0cnVlOwogICAgfSwKICAgIHNldFBhdGg6IGZ1bmN0aW9uIHNldFBhdGgoX3JlZikgewogICAgICB2YXIgcGF0aCA9IF9yZWYucGF0aCwKICAgICAgICBsb2NhbGUgPSBfcmVmLmxvY2FsZTsKICAgICAgdGhpcy5sb2NhbGUgPSBsb2NhbGU7CiAgICAgIHRoaXMucGF0aCA9IHBhdGg7CiAgICB9LAogICAgbG9hZEVkaXRvcjogZnVuY3Rpb24gbG9hZEVkaXRvcihyZWYsIG1vZGUpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CiAgICAgIHRoaXMuY20gPSBDb2RlTWlycm9yLmZyb21UZXh0QXJlYShyZWYsIHsKICAgICAgICB0YWJTaXplOiAyLAogICAgICAgIG1vZGU6ICJ0ZXh0LyIgKyBtb2RlLAogICAgICAgIHRoZW1lOiAnd2lraWpzLWRhcmsnLAogICAgICAgIGxpbmVOdW1iZXJzOiB0cnVlLAogICAgICAgIGxpbmVXcmFwcGluZzogdHJ1ZSwKICAgICAgICBsaW5lOiB0cnVlLAogICAgICAgIHN0eWxlQWN0aXZlTGluZTogdHJ1ZSwKICAgICAgICB2aWV3cG9ydE1hcmdpbjogNTAsCiAgICAgICAgaW5wdXRTdHlsZTogJ2NvbnRlbnRlZGl0YWJsZScsCiAgICAgICAgZGlyZWN0aW9uOiAnbHRyJwogICAgICB9KTsKICAgICAgc3dpdGNoIChtb2RlKSB7CiAgICAgICAgY2FzZSAnaHRtbCc6CiAgICAgICAgICB0aGlzLmNtLnNldFZhbHVlKHRoaXMuc2NyaXB0SnMpOwogICAgICAgICAgdGhpcy5jbS5vbignY2hhbmdlJywgZnVuY3Rpb24gKGMpIHsKICAgICAgICAgICAgX3RoaXM0LnNjcmlwdEpzID0gYy5nZXRWYWx1ZSgpOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdjc3MnOgogICAgICAgICAgdGhpcy5jbS5zZXRWYWx1ZSh0aGlzLnNjcmlwdENzcyk7CiAgICAgICAgICB0aGlzLmNtLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoYykgewogICAgICAgICAgICBfdGhpczQuc2NyaXB0Q3NzID0gYy5nZXRWYWx1ZSgpOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIEVkaXRvciBNb2RlJyk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgICB0aGlzLmNtLnNldFNpemUobnVsbCwgJzUwMHB4Jyk7CiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczQuY20ucmVmcmVzaCgpOwogICAgICAgIF90aGlzNC5jbS5mb2N1cygpOwogICAgICB9KTsKICAgIH0KICB9LAogIGFwb2xsbzogewogICAgbmV3VGFnU3VnZ2VzdGlvbnM6IHsKICAgICAgcXVlcnk6IHsKICAgICAgICAia2luZCI6ICJEb2N1bWVudCIsCiAgICAgICAgImRlZmluaXRpb25zIjogW3sKICAgICAgICAgICJraW5kIjogIk9wZXJhdGlvbkRlZmluaXRpb24iLAogICAgICAgICAgIm9wZXJhdGlvbiI6ICJxdWVyeSIsCiAgICAgICAgICAidmFyaWFibGVEZWZpbml0aW9ucyI6IFt7CiAgICAgICAgICAgICJraW5kIjogIlZhcmlhYmxlRGVmaW5pdGlvbiIsCiAgICAgICAgICAgICJ2YXJpYWJsZSI6IHsKICAgICAgICAgICAgICAia2luZCI6ICJWYXJpYWJsZSIsCiAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAia2luZCI6ICJOYW1lIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJxdWVyeSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICJraW5kIjogIk5vbk51bGxUeXBlIiwKICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICJraW5kIjogIk5hbWVkVHlwZSIsCiAgICAgICAgICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICAgICAgICAgImtpbmQiOiAiTmFtZSIsCiAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJTdHJpbmciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGlyZWN0aXZlcyI6IFtdCiAgICAgICAgICB9XSwKICAgICAgICAgICJkaXJlY3RpdmVzIjogW10sCiAgICAgICAgICAic2VsZWN0aW9uU2V0IjogewogICAgICAgICAgICAia2luZCI6ICJTZWxlY3Rpb25TZXQiLAogICAgICAgICAgICAic2VsZWN0aW9ucyI6IFt7CiAgICAgICAgICAgICAgImtpbmQiOiAiRmllbGQiLAogICAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICAgImtpbmQiOiAiTmFtZSIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAicGFnZXMiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiYXJndW1lbnRzIjogW10sCiAgICAgICAgICAgICAgImRpcmVjdGl2ZXMiOiBbXSwKICAgICAgICAgICAgICAic2VsZWN0aW9uU2V0IjogewogICAgICAgICAgICAgICAgImtpbmQiOiAiU2VsZWN0aW9uU2V0IiwKICAgICAgICAgICAgICAgICJzZWxlY3Rpb25zIjogW3sKICAgICAgICAgICAgICAgICAgImtpbmQiOiAiRmllbGQiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICAgICAgICAgICAia2luZCI6ICJOYW1lIiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAic2VhcmNoVGFncyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyI6IFt7CiAgICAgICAgICAgICAgICAgICAgImtpbmQiOiAiQXJndW1lbnQiLAogICAgICAgICAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICAgICAgICAgImtpbmQiOiAiTmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAicXVlcnkiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAia2luZCI6ICJWYXJpYWJsZSIsCiAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImtpbmQiOiAiTmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJxdWVyeSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH1dLAogICAgICAgICAgICAgICAgICAiZGlyZWN0aXZlcyI6IFtdCiAgICAgICAgICAgICAgICB9XQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0KICAgICAgICAgIH0KICAgICAgICB9XSwKICAgICAgICAibG9jIjogewogICAgICAgICAgInN0YXJ0IjogMCwKICAgICAgICAgICJlbmQiOiAxMjAsCiAgICAgICAgICAic291cmNlIjogewogICAgICAgICAgICAiYm9keSI6ICJcbiAgICAgICAgcXVlcnkgKCRxdWVyeTogU3RyaW5nISkge1xuICAgICAgICAgIHBhZ2VzIHtcbiAgICAgICAgICAgIHNlYXJjaFRhZ3MgKHF1ZXJ5OiAkcXVlcnkpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAiLAogICAgICAgICAgICAibmFtZSI6ICJHcmFwaFFMIHJlcXVlc3QiLAogICAgICAgICAgICAibG9jYXRpb25PZmZzZXQiOiB7CiAgICAgICAgICAgICAgImxpbmUiOiAxLAogICAgICAgICAgICAgICJjb2x1bW4iOiAxCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHZhcmlhYmxlczogZnVuY3Rpb24gdmFyaWFibGVzKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBxdWVyeTogdGhpcy5uZXdUYWdTZWFyY2gKICAgICAgICB9OwogICAgICB9LAogICAgICBmZXRjaFBvbGljeTogJ2NhY2hlLWZpcnN0JywKICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZGF0YSkgewogICAgICAgIHJldHVybiBfZ2V0KGRhdGEsICdwYWdlcy5zZWFyY2hUYWdzJywgW10pOwogICAgICB9LAogICAgICBza2lwOiBmdW5jdGlvbiBza2lwKCkgewogICAgICAgIHJldHVybiAhdGhpcy52YWx1ZSB8fCBfaXNFbXB0eSh0aGlzLm5ld1RhZ1NlYXJjaCk7CiAgICAgIH0sCiAgICAgIHRocm90dGxlOiA1MDAKICAgIH0KICB9Cn07"},null]}