{"remainingRequest":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js??ref--0-1!/Users/shanebeal/Desktop/bodewiki/node_modules/vuetify/lib/util/helpers.js","dependencies":[{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/vuetify/lib/util/helpers.js","mtime":1743632221435},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/cache-loader/dist/cjs.js","mtime":1743632217742},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js","mtime":1743632218430}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}