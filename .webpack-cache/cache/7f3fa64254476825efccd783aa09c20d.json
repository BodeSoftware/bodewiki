{"remainingRequest":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js??ref--0-1!/Users/shanebeal/Desktop/bodewiki/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shanebeal/Desktop/bodewiki/client/components/editor/editor-bode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shanebeal/Desktop/bodewiki/client/components/editor/editor-bode.vue","mtime":1742862088805},{"path":"/Users/shanebeal/Desktop/bodewiki/.babelrc","mtime":1742797763162},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/cache-loader/dist/cjs.js","mtime":1742846258556},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js","mtime":1742846259254},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/vue-loader/lib/index.js","mtime":1742846259543}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9nZXQgZnJvbSAibG9kYXNoL2dldCI7IC8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCnZhciBfdGVtcGxhdGVPYmplY3Q7CmZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7ICJ1c2Ugc3RyaWN0IjsgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vTElDRU5TRSAqLyBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHsgcmV0dXJuIGU7IH07IHZhciB0LCBlID0ge30sIHIgPSBPYmplY3QucHJvdG90eXBlLCBuID0gci5oYXNPd25Qcm9wZXJ0eSwgbyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmdW5jdGlvbiAodCwgZSwgcikgeyB0W2VdID0gci52YWx1ZTsgfSwgaSA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIFN5bWJvbCA/IFN5bWJvbCA6IHt9LCBhID0gaS5pdGVyYXRvciB8fCAiQEBpdGVyYXRvciIsIGMgPSBpLmFzeW5jSXRlcmF0b3IgfHwgIkBAYXN5bmNJdGVyYXRvciIsIHUgPSBpLnRvU3RyaW5nVGFnIHx8ICJAQHRvU3RyaW5nVGFnIjsgZnVuY3Rpb24gZGVmaW5lKHQsIGUsIHIpIHsgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBlLCB7IHZhbHVlOiByLCBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwIH0pLCB0W2VdOyB9IHRyeSB7IGRlZmluZSh7fSwgIiIpOyB9IGNhdGNoICh0KSB7IGRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZSh0LCBlLCByKSB7IHJldHVybiB0W2VdID0gcjsgfTsgfSBmdW5jdGlvbiB3cmFwKHQsIGUsIHIsIG4pIHsgdmFyIGkgPSBlICYmIGUucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gZSA6IEdlbmVyYXRvciwgYSA9IE9iamVjdC5jcmVhdGUoaS5wcm90b3R5cGUpLCBjID0gbmV3IENvbnRleHQobiB8fCBbXSk7IHJldHVybiBvKGEsICJfaW52b2tlIiwgeyB2YWx1ZTogbWFrZUludm9rZU1ldGhvZCh0LCByLCBjKSB9KSwgYTsgfSBmdW5jdGlvbiB0cnlDYXRjaCh0LCBlLCByKSB7IHRyeSB7IHJldHVybiB7IHR5cGU6ICJub3JtYWwiLCBhcmc6IHQuY2FsbChlLCByKSB9OyB9IGNhdGNoICh0KSB7IHJldHVybiB7IHR5cGU6ICJ0aHJvdyIsIGFyZzogdCB9OyB9IH0gZS53cmFwID0gd3JhcDsgdmFyIGggPSAic3VzcGVuZGVkU3RhcnQiLCBsID0gInN1c3BlbmRlZFlpZWxkIiwgZiA9ICJleGVjdXRpbmciLCBzID0gImNvbXBsZXRlZCIsIHkgPSB7fTsgZnVuY3Rpb24gR2VuZXJhdG9yKCkge30gZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fSBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9IHZhciBwID0ge307IGRlZmluZShwLCBhLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTsgdmFyIGQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsIHYgPSBkICYmIGQoZCh2YWx1ZXMoW10pKSk7IHYgJiYgdiAhPT0gciAmJiBuLmNhbGwodiwgYSkgJiYgKHAgPSB2KTsgdmFyIGcgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwKTsgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHQpIHsgWyJuZXh0IiwgInRocm93IiwgInJldHVybiJdLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgZGVmaW5lKHQsIGUsIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0aGlzLl9pbnZva2UoZSwgdCk7IH0pOyB9KTsgfSBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKHQsIGUpIHsgZnVuY3Rpb24gaW52b2tlKHIsIG8sIGksIGEpIHsgdmFyIGMgPSB0cnlDYXRjaCh0W3JdLCB0LCBvKTsgaWYgKCJ0aHJvdyIgIT09IGMudHlwZSkgeyB2YXIgdSA9IGMuYXJnLCBoID0gdS52YWx1ZTsgcmV0dXJuIGggJiYgIm9iamVjdCIgPT0gdHlwZW9mIGggJiYgbi5jYWxsKGgsICJfX2F3YWl0IikgPyBlLnJlc29sdmUoaC5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uICh0KSB7IGludm9rZSgibmV4dCIsIHQsIGksIGEpOyB9LCBmdW5jdGlvbiAodCkgeyBpbnZva2UoInRocm93IiwgdCwgaSwgYSk7IH0pIDogZS5yZXNvbHZlKGgpLnRoZW4oZnVuY3Rpb24gKHQpIHsgdS52YWx1ZSA9IHQsIGkodSk7IH0sIGZ1bmN0aW9uICh0KSB7IHJldHVybiBpbnZva2UoInRocm93IiwgdCwgaSwgYSk7IH0pOyB9IGEoYy5hcmcpOyB9IHZhciByOyBvKHRoaXMsICJfaW52b2tlIiwgeyB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodCwgbikgeyBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHsgcmV0dXJuIG5ldyBlKGZ1bmN0aW9uIChlLCByKSB7IGludm9rZSh0LCBuLCBlLCByKTsgfSk7IH0gcmV0dXJuIHIgPSByID8gci50aGVuKGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLCBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZykgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpOyB9IH0pOyB9IGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoZSwgciwgbikgeyB2YXIgbyA9IGg7IHJldHVybiBmdW5jdGlvbiAoaSwgYSkgeyBpZiAobyA9PT0gZikgdGhyb3cgRXJyb3IoIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmciKTsgaWYgKG8gPT09IHMpIHsgaWYgKCJ0aHJvdyIgPT09IGkpIHRocm93IGE7IHJldHVybiB7IHZhbHVlOiB0LCBkb25lOiAhMCB9OyB9IGZvciAobi5tZXRob2QgPSBpLCBuLmFyZyA9IGE7OykgeyB2YXIgYyA9IG4uZGVsZWdhdGU7IGlmIChjKSB7IHZhciB1ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShjLCBuKTsgaWYgKHUpIHsgaWYgKHUgPT09IHkpIGNvbnRpbnVlOyByZXR1cm4gdTsgfSB9IGlmICgibmV4dCIgPT09IG4ubWV0aG9kKSBuLnNlbnQgPSBuLl9zZW50ID0gbi5hcmc7ZWxzZSBpZiAoInRocm93IiA9PT0gbi5tZXRob2QpIHsgaWYgKG8gPT09IGgpIHRocm93IG8gPSBzLCBuLmFyZzsgbi5kaXNwYXRjaEV4Y2VwdGlvbihuLmFyZyk7IH0gZWxzZSAicmV0dXJuIiA9PT0gbi5tZXRob2QgJiYgbi5hYnJ1cHQoInJldHVybiIsIG4uYXJnKTsgbyA9IGY7IHZhciBwID0gdHJ5Q2F0Y2goZSwgciwgbik7IGlmICgibm9ybWFsIiA9PT0gcC50eXBlKSB7IGlmIChvID0gbi5kb25lID8gcyA6IGwsIHAuYXJnID09PSB5KSBjb250aW51ZTsgcmV0dXJuIHsgdmFsdWU6IHAuYXJnLCBkb25lOiBuLmRvbmUgfTsgfSAidGhyb3ciID09PSBwLnR5cGUgJiYgKG8gPSBzLCBuLm1ldGhvZCA9ICJ0aHJvdyIsIG4uYXJnID0gcC5hcmcpOyB9IH07IH0gZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShlLCByKSB7IHZhciBuID0gci5tZXRob2QsIG8gPSBlLml0ZXJhdG9yW25dOyBpZiAobyA9PT0gdCkgcmV0dXJuIHIuZGVsZWdhdGUgPSBudWxsLCAidGhyb3ciID09PSBuICYmIGUuaXRlcmF0b3IucmV0dXJuICYmIChyLm1ldGhvZCA9ICJyZXR1cm4iLCByLmFyZyA9IHQsIG1heWJlSW52b2tlRGVsZWdhdGUoZSwgciksICJ0aHJvdyIgPT09IHIubWV0aG9kKSB8fCAicmV0dXJuIiAhPT0gbiAmJiAoci5tZXRob2QgPSAidGhyb3ciLCByLmFyZyA9IG5ldyBUeXBlRXJyb3IoIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJyIgKyBuICsgIicgbWV0aG9kIikpLCB5OyB2YXIgaSA9IHRyeUNhdGNoKG8sIGUuaXRlcmF0b3IsIHIuYXJnKTsgaWYgKCJ0aHJvdyIgPT09IGkudHlwZSkgcmV0dXJuIHIubWV0aG9kID0gInRocm93Iiwgci5hcmcgPSBpLmFyZywgci5kZWxlZ2F0ZSA9IG51bGwsIHk7IHZhciBhID0gaS5hcmc7IHJldHVybiBhID8gYS5kb25lID8gKHJbZS5yZXN1bHROYW1lXSA9IGEudmFsdWUsIHIubmV4dCA9IGUubmV4dExvYywgInJldHVybiIgIT09IHIubWV0aG9kICYmIChyLm1ldGhvZCA9ICJuZXh0Iiwgci5hcmcgPSB0KSwgci5kZWxlZ2F0ZSA9IG51bGwsIHkpIDogYSA6IChyLm1ldGhvZCA9ICJ0aHJvdyIsIHIuYXJnID0gbmV3IFR5cGVFcnJvcigiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3QiKSwgci5kZWxlZ2F0ZSA9IG51bGwsIHkpOyB9IGZ1bmN0aW9uIHB1c2hUcnlFbnRyeSh0KSB7IHZhciBlID0geyB0cnlMb2M6IHRbMF0gfTsgMSBpbiB0ICYmIChlLmNhdGNoTG9jID0gdFsxXSksIDIgaW4gdCAmJiAoZS5maW5hbGx5TG9jID0gdFsyXSwgZS5hZnRlckxvYyA9IHRbM10pLCB0aGlzLnRyeUVudHJpZXMucHVzaChlKTsgfSBmdW5jdGlvbiByZXNldFRyeUVudHJ5KHQpIHsgdmFyIGUgPSB0LmNvbXBsZXRpb24gfHwge307IGUudHlwZSA9ICJub3JtYWwiLCBkZWxldGUgZS5hcmcsIHQuY29tcGxldGlvbiA9IGU7IH0gZnVuY3Rpb24gQ29udGV4dCh0KSB7IHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogInJvb3QiIH1dLCB0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7IH0gZnVuY3Rpb24gdmFsdWVzKGUpIHsgaWYgKGUgfHwgIiIgPT09IGUpIHsgdmFyIHIgPSBlW2FdOyBpZiAocikgcmV0dXJuIHIuY2FsbChlKTsgaWYgKCJmdW5jdGlvbiIgPT0gdHlwZW9mIGUubmV4dCkgcmV0dXJuIGU7IGlmICghaXNOYU4oZS5sZW5ndGgpKSB7IHZhciBvID0gLTEsIGkgPSBmdW5jdGlvbiBuZXh0KCkgeyBmb3IgKDsgKytvIDwgZS5sZW5ndGg7KSBpZiAobi5jYWxsKGUsIG8pKSByZXR1cm4gbmV4dC52YWx1ZSA9IGVbb10sIG5leHQuZG9uZSA9ICExLCBuZXh0OyByZXR1cm4gbmV4dC52YWx1ZSA9IHQsIG5leHQuZG9uZSA9ICEwLCBuZXh0OyB9OyByZXR1cm4gaS5uZXh0ID0gaTsgfSB9IHRocm93IG5ldyBUeXBlRXJyb3IodHlwZW9mIGUgKyAiIGlzIG5vdCBpdGVyYWJsZSIpOyB9IHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgbyhnLCAiY29uc3RydWN0b3IiLCB7IHZhbHVlOiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgY29uZmlndXJhYmxlOiAhMCB9KSwgbyhHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgImNvbnN0cnVjdG9yIiwgeyB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb24sIGNvbmZpZ3VyYWJsZTogITAgfSksIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCB1LCAiR2VuZXJhdG9yRnVuY3Rpb24iKSwgZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSAiZnVuY3Rpb24iID09IHR5cGVvZiB0ICYmIHQuY29uc3RydWN0b3I7IHJldHVybiAhIWUgJiYgKGUgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8ICJHZW5lcmF0b3JGdW5jdGlvbiIgPT09IChlLmRpc3BsYXlOYW1lIHx8IGUubmFtZSkpOyB9LCBlLm1hcmsgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHQsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSA6ICh0Ll9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmUodCwgdSwgIkdlbmVyYXRvckZ1bmN0aW9uIikpLCB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZyksIHQ7IH0sIGUuYXdyYXAgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4geyBfX2F3YWl0OiB0IH07IH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSksIGUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGUuYXN5bmMgPSBmdW5jdGlvbiAodCwgciwgbiwgbywgaSkgeyB2b2lkIDAgPT09IGkgJiYgKGkgPSBQcm9taXNlKTsgdmFyIGEgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKHQsIHIsIG4sIG8pLCBpKTsgcmV0dXJuIGUuaXNHZW5lcmF0b3JGdW5jdGlvbihyKSA/IGEgOiBhLm5leHQoKS50aGVuKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LmRvbmUgPyB0LnZhbHVlIDogYS5uZXh0KCk7IH0pOyB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoZyksIGRlZmluZShnLCB1LCAiR2VuZXJhdG9yIiksIGRlZmluZShnLCBhLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSwgZGVmaW5lKGcsICJ0b1N0cmluZyIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuICJbb2JqZWN0IEdlbmVyYXRvcl0iOyB9KSwgZS5rZXlzID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSBPYmplY3QodCksIHIgPSBbXTsgZm9yICh2YXIgbiBpbiBlKSByLnB1c2gobik7IHJldHVybiByLnJldmVyc2UoKSwgZnVuY3Rpb24gbmV4dCgpIHsgZm9yICg7IHIubGVuZ3RoOykgeyB2YXIgdCA9IHIucG9wKCk7IGlmICh0IGluIGUpIHJldHVybiBuZXh0LnZhbHVlID0gdCwgbmV4dC5kb25lID0gITEsIG5leHQ7IH0gcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0OyB9OyB9LCBlLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiBDb250ZXh0LCByZXNldDogZnVuY3Rpb24gcmVzZXQoZSkgeyBpZiAodGhpcy5wcmV2ID0gMCwgdGhpcy5uZXh0ID0gMCwgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSAibmV4dCIsIHRoaXMuYXJnID0gdCwgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSksICFlKSBmb3IgKHZhciByIGluIHRoaXMpICJ0IiA9PT0gci5jaGFyQXQoMCkgJiYgbi5jYWxsKHRoaXMsIHIpICYmICFpc05hTigrci5zbGljZSgxKSkgJiYgKHRoaXNbcl0gPSB0KTsgfSwgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHsgdGhpcy5kb25lID0gITA7IHZhciB0ID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247IGlmICgidGhyb3ciID09PSB0LnR5cGUpIHRocm93IHQuYXJnOyByZXR1cm4gdGhpcy5ydmFsOyB9LCBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24gZGlzcGF0Y2hFeGNlcHRpb24oZSkgeyBpZiAodGhpcy5kb25lKSB0aHJvdyBlOyB2YXIgciA9IHRoaXM7IGZ1bmN0aW9uIGhhbmRsZShuLCBvKSB7IHJldHVybiBhLnR5cGUgPSAidGhyb3ciLCBhLmFyZyA9IGUsIHIubmV4dCA9IG4sIG8gJiYgKHIubWV0aG9kID0gIm5leHQiLCByLmFyZyA9IHQpLCAhIW87IH0gZm9yICh2YXIgbyA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBvID49IDA7IC0tbykgeyB2YXIgaSA9IHRoaXMudHJ5RW50cmllc1tvXSwgYSA9IGkuY29tcGxldGlvbjsgaWYgKCJyb290IiA9PT0gaS50cnlMb2MpIHJldHVybiBoYW5kbGUoImVuZCIpOyBpZiAoaS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7IHZhciBjID0gbi5jYWxsKGksICJjYXRjaExvYyIpLCB1ID0gbi5jYWxsKGksICJmaW5hbGx5TG9jIik7IGlmIChjICYmIHUpIHsgaWYgKHRoaXMucHJldiA8IGkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoaS5jYXRjaExvYywgITApOyBpZiAodGhpcy5wcmV2IDwgaS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGkuZmluYWxseUxvYyk7IH0gZWxzZSBpZiAoYykgeyBpZiAodGhpcy5wcmV2IDwgaS5jYXRjaExvYykgcmV0dXJuIGhhbmRsZShpLmNhdGNoTG9jLCAhMCk7IH0gZWxzZSB7IGlmICghdSkgdGhyb3cgRXJyb3IoInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5Iik7IGlmICh0aGlzLnByZXYgPCBpLmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoaS5maW5hbGx5TG9jKTsgfSB9IH0gfSwgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodCwgZSkgeyBmb3IgKHZhciByID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IHIgPj0gMDsgLS1yKSB7IHZhciBvID0gdGhpcy50cnlFbnRyaWVzW3JdOyBpZiAoby50cnlMb2MgPD0gdGhpcy5wcmV2ICYmIG4uY2FsbChvLCAiZmluYWxseUxvYyIpICYmIHRoaXMucHJldiA8IG8uZmluYWxseUxvYykgeyB2YXIgaSA9IG87IGJyZWFrOyB9IH0gaSAmJiAoImJyZWFrIiA9PT0gdCB8fCAiY29udGludWUiID09PSB0KSAmJiBpLnRyeUxvYyA8PSBlICYmIGUgPD0gaS5maW5hbGx5TG9jICYmIChpID0gbnVsbCk7IHZhciBhID0gaSA/IGkuY29tcGxldGlvbiA6IHt9OyByZXR1cm4gYS50eXBlID0gdCwgYS5hcmcgPSBlLCBpID8gKHRoaXMubWV0aG9kID0gIm5leHQiLCB0aGlzLm5leHQgPSBpLmZpbmFsbHlMb2MsIHkpIDogdGhpcy5jb21wbGV0ZShhKTsgfSwgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHQsIGUpIHsgaWYgKCJ0aHJvdyIgPT09IHQudHlwZSkgdGhyb3cgdC5hcmc7IHJldHVybiAiYnJlYWsiID09PSB0LnR5cGUgfHwgImNvbnRpbnVlIiA9PT0gdC50eXBlID8gdGhpcy5uZXh0ID0gdC5hcmcgOiAicmV0dXJuIiA9PT0gdC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gdC5hcmcsIHRoaXMubWV0aG9kID0gInJldHVybiIsIHRoaXMubmV4dCA9ICJlbmQiKSA6ICJub3JtYWwiID09PSB0LnR5cGUgJiYgZSAmJiAodGhpcy5uZXh0ID0gZSksIHk7IH0sIGZpbmlzaDogZnVuY3Rpb24gZmluaXNoKHQpIHsgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkgeyB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTsgaWYgKHIuZmluYWxseUxvYyA9PT0gdCkgcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLCByLmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShyKSwgeTsgfSB9LCBjYXRjaDogZnVuY3Rpb24gX2NhdGNoKHQpIHsgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkgeyB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTsgaWYgKHIudHJ5TG9jID09PSB0KSB7IHZhciBuID0gci5jb21wbGV0aW9uOyBpZiAoInRocm93IiA9PT0gbi50eXBlKSB7IHZhciBvID0gbi5hcmc7IHJlc2V0VHJ5RW50cnkocik7IH0gcmV0dXJuIG87IH0gfSB0aHJvdyBFcnJvcigiaWxsZWdhbCBjYXRjaCBhdHRlbXB0Iik7IH0sIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uIGRlbGVnYXRlWWllbGQoZSwgciwgbikgeyByZXR1cm4gdGhpcy5kZWxlZ2F0ZSA9IHsgaXRlcmF0b3I6IHZhbHVlcyhlKSwgcmVzdWx0TmFtZTogciwgbmV4dExvYzogbiB9LCAibmV4dCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHQpLCB5OyB9IH0sIGU7IH0KZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKGUsIHQpIHsgcmV0dXJuIHQgfHwgKHQgPSBlLnNsaWNlKDApKSwgZS5yYXcgPSB0LCBlOyB9CmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChuLCB0LCBlLCByLCBvLCBhLCBjKSB7IHRyeSB7IHZhciBpID0gblthXShjKSwgdSA9IGkudmFsdWU7IH0gY2F0Y2ggKG4pIHsgcmV0dXJuIHZvaWQgZShuKTsgfSBpLmRvbmUgPyB0KHUpIDogUHJvbWlzZS5yZXNvbHZlKHUpLnRoZW4ociwgbyk7IH0KZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IobikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgdCA9IHRoaXMsIGUgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAociwgbykgeyB2YXIgYSA9IG4uYXBwbHkodCwgZSk7IGZ1bmN0aW9uIF9uZXh0KG4pIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGEsIHIsIG8sIF9uZXh0LCBfdGhyb3csICJuZXh0Iiwgbik7IH0gZnVuY3Rpb24gX3Rocm93KG4pIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGEsIHIsIG8sIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIG4pOyB9IF9uZXh0KHZvaWQgMCk7IH0pOyB9OyB9CmltcG9ydCB7IGdldCwgc3luYyB9IGZyb20gJ3Z1ZXgtcGF0aGlmeSc7CmltcG9ydCB7IEVkaXRvciB9IGZyb20gJ0B0aXB0YXAvdnVlLTInOwppbXBvcnQgU3RhcnRlcktpdCBmcm9tICdAdGlwdGFwL3N0YXJ0ZXIta2l0JzsKaW1wb3J0IFBsYWNlaG9sZGVyIGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLXBsYWNlaG9sZGVyJzsKaW1wb3J0IEltYWdlIGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLWltYWdlJzsKaW1wb3J0IExpbmsgZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tbGluayc7CmltcG9ydCBUYWJsZSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi10YWJsZSc7CmltcG9ydCBUYWJsZVJvdyBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi10YWJsZS1yb3cnOwppbXBvcnQgVGFibGVDZWxsIGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLXRhYmxlLWNlbGwnOwppbXBvcnQgVGFibGVIZWFkZXIgZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tdGFibGUtaGVhZGVyJzsKaW1wb3J0IFRleHRTdHlsZSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi10ZXh0LXN0eWxlJzsKaW1wb3J0IENvbG9yIGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLWNvbG9yJzsKaW1wb3J0IEZvbnRGYW1pbHkgZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tZm9udC1mYW1pbHknOwppbXBvcnQgVGV4dEFsaWduIGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLXRleHQtYWxpZ24nOwppbXBvcnQgSGlnaGxpZ2h0IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLWhpZ2hsaWdodCc7CmltcG9ydCBTdWJzY3JpcHQgZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tc3Vic2NyaXB0JzsKaW1wb3J0IFN1cGVyc2NyaXB0IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLXN1cGVyc2NyaXB0JzsKaW1wb3J0IFRhc2tMaXN0IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLXRhc2stbGlzdCc7CmltcG9ydCBUYXNrSXRlbSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi10YXNrLWl0ZW0nOwppbXBvcnQgQ29kZUJsb2NrTG93bGlnaHQgZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tY29kZS1ibG9jay1sb3dsaWdodCc7CmltcG9ydCB7IGxvd2xpZ2h0IH0gZnJvbSAnbG93bGlnaHQnOwppbXBvcnQgeyBodG1sIGFzIGJlYXV0aWZ5IH0gZnJvbSAnanMtYmVhdXRpZnknOwppbXBvcnQgRWRpdG9yQm9kZVRvb2xiYXIgZnJvbSAnLi9ib2RlL3Rvb2xiYXIudnVlJzsKaW1wb3J0IFNsYXNoQ29tbWFuZCBmcm9tICcuL2JvZGUvc2xhc2gtY29tbWFuZC52dWUnOwppbXBvcnQgSW5mb0JveCBmcm9tICcuL2JvZGUvaW5mby1ib3gudnVlJzsKaW1wb3J0IEV4cGFuZENvbGxhcHNlIGZyb20gJy4vYm9kZS9leHBhbmQtY29sbGFwc2UudnVlJzsKaW1wb3J0IFBhZ2VUcmVlIGZyb20gJy4vYm9kZS9wYWdlLXRyZWUudnVlJzsKaW1wb3J0IENvbW1lbnRzIGZyb20gJy4vYm9kZS9jb21tZW50cy52dWUnOwppbXBvcnQgVmVyc2lvbkhpc3RvcnkgZnJvbSAnLi9ib2RlL3ZlcnNpb24taGlzdG9yeS52dWUnOwppbXBvcnQgU2VhcmNoQmFyIGZyb20gJy4vYm9kZS9zZWFyY2gtYmFyLnZ1ZSc7CmltcG9ydCBFZGl0b3JDb25mbGljdCBmcm9tICcuL2JvZGUvY29uZmxpY3QudnVlJzsKCi8qIGdsb2JhbCBzaXRlTGFuZ3MsIFdJS0kgKi8KCi8vIENvbmZpZ3VyZSBDb2RlQmxvY2tMb3dsaWdodCB3aXRoIGxvd2xpZ2h0CkNvZGVCbG9ja0xvd2xpZ2h0LmNvbmZpZ3VyZSh7CiAgbG93bGlnaHQ6IGxvd2xpZ2h0Cn0pOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0VkaXRvckJvZGUnLAogIGNvbXBvbmVudHM6IHsKICAgIEVkaXRvckJvZGVUb29sYmFyOiBFZGl0b3JCb2RlVG9vbGJhciwKICAgIFNsYXNoQ29tbWFuZDogU2xhc2hDb21tYW5kLAogICAgSW5mb0JveDogSW5mb0JveCwKICAgIEV4cGFuZENvbGxhcHNlOiBFeHBhbmRDb2xsYXBzZSwKICAgIFBhZ2VUcmVlOiBQYWdlVHJlZSwKICAgIENvbW1lbnRzOiBDb21tZW50cywKICAgIFZlcnNpb25IaXN0b3J5OiBWZXJzaW9uSGlzdG9yeSwKICAgIFNlYXJjaEJhcjogU2VhcmNoQmFyLAogICAgRWRpdG9yQ29uZmxpY3Q6IEVkaXRvckNvbmZsaWN0CiAgfSwKICBwcm9wczogewogICAgc2F2ZTogewogICAgICB0eXBlOiBGdW5jdGlvbiwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7fQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGVkaXRvcjogbnVsbCwKICAgICAgaXNFZGl0b3JSZWFkeTogZmFsc2UsCiAgICAgIHN0YXRzOiB7CiAgICAgICAgY2hhcmFjdGVyczogMCwKICAgICAgICB3b3JkczogMAogICAgICB9LAogICAgICBjb250ZW50OiAnJywKICAgICAgaXNDb25mbGljdDogZmFsc2UsCiAgICAgIGluc2VydExpbmtEaWFsb2c6IGZhbHNlLAogICAgICBzbGFzaENvbW1hbmRBY3RpdmU6IGZhbHNlLAogICAgICBzbGFzaENvbW1hbmRQb3NpdGlvbjogewogICAgICAgIHg6IDAsCiAgICAgICAgeTogMAogICAgICB9LAogICAgICBzbGFzaENvbW1hbmRRdWVyeTogJycsCiAgICAgIHNsYXNoQ29tbWFuZFJhbmdlOiBudWxsLAogICAgICBzaG93UGFnZVRyZWU6IGZhbHNlLAogICAgICBzaG93Q29tbWVudHM6IGZhbHNlLAogICAgICBzaG93VmVyc2lvbkhpc3Rvcnk6IGZhbHNlLAogICAgICBzaG93U2VhcmNoOiBmYWxzZSwKICAgICAgY3VycmVudFZlcnNpb246IG51bGwsCiAgICAgIGNvbW1lbnRzOiBbXSwKICAgICAgdmVyc2lvbnM6IFtdLAogICAgICBzZWFyY2hSZXN1bHRzOiBbXQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBpc01vYmlsZTogZnVuY3Rpb24gaXNNb2JpbGUoKSB7CiAgICAgIHJldHVybiB0aGlzLiR2dWV0aWZ5LmJyZWFrcG9pbnQuc21BbmREb3duOwogICAgfSwKICAgIGxvY2FsZTogZ2V0KCdwYWdlL2xvY2FsZScpLAogICAgcGF0aDogZ2V0KCdwYWdlL3BhdGgnKSwKICAgIG1vZGU6IGdldCgnZWRpdG9yL21vZGUnKSwKICAgIGFjdGl2ZU1vZGFsOiBzeW5jKCdlZGl0b3IvYWN0aXZlTW9kYWwnKSwKICAgIGNoZWNrb3V0RGF0ZUFjdGl2ZTogc3luYygnZWRpdG9yL2NoZWNrb3V0RGF0ZUFjdGl2ZScpCiAgfSwKICBtZXRob2RzOiB7CiAgICBpbnNlcnRMaW5rOiBmdW5jdGlvbiBpbnNlcnRMaW5rKCkgewogICAgICB0aGlzLmluc2VydExpbmtEaWFsb2cgPSB0cnVlOwogICAgfSwKICAgIGluc2VydExpbmtIYW5kbGVyOiBmdW5jdGlvbiBpbnNlcnRMaW5rSGFuZGxlcihfcmVmKSB7CiAgICAgIHZhciBsb2NhbGUgPSBfcmVmLmxvY2FsZSwKICAgICAgICBwYXRoID0gX3JlZi5wYXRoOwogICAgICBpZiAoIXRoaXMuZWRpdG9yKSByZXR1cm47CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIHVybCA9IHNpdGVMYW5ncy5sZW5ndGggPiAwID8gIi8iICsgbG9jYWxlICsgIi8iICsgcGF0aCA6ICIvIiArIHBhdGg7CgogICAgICAgIC8vIFNldCBsaW5rIG9uIGN1cnJlbnQgc2VsZWN0aW9uCiAgICAgICAgdGhpcy5lZGl0b3IuY2hhaW4oKS5mb2N1cygpLnNldExpbmsoewogICAgICAgICAgaHJlZjogdXJsCiAgICAgICAgfSkucnVuKCk7CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluc2VydGluZyBsaW5rOicsIGVycik7CiAgICAgIH0KICAgIH0sCiAgICB1cGRhdGVTdGF0czogZnVuY3Rpb24gdXBkYXRlU3RhdHMoKSB7CiAgICAgIGlmICghdGhpcy5lZGl0b3IpIHJldHVybjsKICAgICAgdmFyIHRleHQgPSB0aGlzLmVkaXRvci5zdGF0ZS5kb2MudGV4dENvbnRlbnQ7CiAgICAgIHRoaXMuc3RhdHMgPSB7CiAgICAgICAgY2hhcmFjdGVyczogdGV4dC5sZW5ndGgsCiAgICAgICAgd29yZHM6IHRleHQuc3BsaXQoL1xzKy8pLmZpbHRlcihmdW5jdGlvbiAodykgewogICAgICAgICAgcmV0dXJuIHcubGVuZ3RoID4gMDsKICAgICAgICB9KS5sZW5ndGgKICAgICAgfTsKICAgIH0sCiAgICB0b2dnbGVTbGFzaENvbW1hbmQ6IGZ1bmN0aW9uIHRvZ2dsZVNsYXNoQ29tbWFuZCgpIHsKICAgICAgaWYgKCF0aGlzLmVkaXRvcikgcmV0dXJuOwogICAgICB2YXIgdmlldyA9IHRoaXMuZWRpdG9yLnZpZXc7CiAgICAgIHZhciBzZWxlY3Rpb24gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjsKICAgICAgdmFyIGNvb3JkcyA9IHZpZXcuY29vcmRzQXRQb3Moc2VsZWN0aW9uLiRhbmNob3IucG9zKTsKICAgICAgdGhpcy5zbGFzaENvbW1hbmRQb3NpdGlvbiA9IHsKICAgICAgICB4OiBjb29yZHMubGVmdCwKICAgICAgICB5OiBjb29yZHMuYm90dG9tCiAgICAgIH07CiAgICAgIHRoaXMuc2xhc2hDb21tYW5kQWN0aXZlID0gdHJ1ZTsKICAgICAgdGhpcy5zbGFzaENvbW1hbmRRdWVyeSA9ICcnOwogICAgfSwKICAgIG9uU2xhc2hDb21tYW5kU2VsZWN0OiBmdW5jdGlvbiBvblNsYXNoQ29tbWFuZFNlbGVjdChjb21tYW5kKSB7CiAgICAgIGlmICghdGhpcy5lZGl0b3IpIHJldHVybjsKICAgICAgY29tbWFuZC5hY3Rpb24odGhpcy5lZGl0b3IpOwogICAgICB0aGlzLnNsYXNoQ29tbWFuZEFjdGl2ZSA9IGZhbHNlOwogICAgfSwKICAgIHRvZ2dsZVBhZ2VUcmVlOiBmdW5jdGlvbiB0b2dnbGVQYWdlVHJlZSgpIHsKICAgICAgdGhpcy5zaG93UGFnZVRyZWUgPSAhdGhpcy5zaG93UGFnZVRyZWU7CiAgICB9LAogICAgdG9nZ2xlQ29tbWVudHM6IGZ1bmN0aW9uIHRvZ2dsZUNvbW1lbnRzKCkgewogICAgICB0aGlzLnNob3dDb21tZW50cyA9ICF0aGlzLnNob3dDb21tZW50czsKICAgIH0sCiAgICB0b2dnbGVWZXJzaW9uSGlzdG9yeTogZnVuY3Rpb24gdG9nZ2xlVmVyc2lvbkhpc3RvcnkoKSB7CiAgICAgIHRoaXMuc2hvd1ZlcnNpb25IaXN0b3J5ID0gIXRoaXMuc2hvd1ZlcnNpb25IaXN0b3J5OwogICAgfSwKICAgIHRvZ2dsZVNlYXJjaDogZnVuY3Rpb24gdG9nZ2xlU2VhcmNoKCkgewogICAgICB0aGlzLnNob3dTZWFyY2ggPSAhdGhpcy5zaG93U2VhcmNoOwogICAgfSwKICAgIGFkZENvbW1lbnQ6IGZ1bmN0aW9uIGFkZENvbW1lbnQoY29tbWVudCkgewogICAgICB0aGlzLmNvbW1lbnRzLnB1c2goewogICAgICAgIGlkOiBEYXRlLm5vdygpLAogICAgICAgIHRleHQ6IGNvbW1lbnQsCiAgICAgICAgYXV0aG9yOiB0aGlzLiRzdG9yZS5nZXQoJ3VzZXIvbmFtZScpLAogICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpCiAgICAgIH0pOwogICAgfSwKICAgIGxvYWRWZXJzaW9uOiBmdW5jdGlvbiBsb2FkVmVyc2lvbih2ZXJzaW9uKSB7CiAgICAgIGlmICghdGhpcy5lZGl0b3IpIHJldHVybjsKICAgICAgdGhpcy5jdXJyZW50VmVyc2lvbiA9IHZlcnNpb247CiAgICAgIHRoaXMuZWRpdG9yLmNvbW1hbmRzLnNldENvbnRlbnQodmVyc2lvbi5jb250ZW50KTsKICAgICAgdGhpcy5zaG93VmVyc2lvbkhpc3RvcnkgPSBmYWxzZTsKICAgICAgdGhpcy5jaGVja291dERhdGVBY3RpdmUgPSB2ZXJzaW9uLnRpbWVzdGFtcDsKICAgICAgdGhpcy4kcm9vdC4kZW1pdCgncmVzZXRFZGl0b3JDb25mbGljdCcpOwogICAgfSwKICAgIHNlYXJjaDogZnVuY3Rpb24gc2VhcmNoKHF1ZXJ5KSB7CiAgICAgIGlmICghdGhpcy5lZGl0b3IpIHJldHVybjsKICAgICAgdHJ5IHsKICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuZWRpdG9yLmdldFRleHQoKTsKICAgICAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgICAgIHZhciBwb3MgPSBjb250ZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeS50b0xvd2VyQ2FzZSgpKTsKICAgICAgICB3aGlsZSAocG9zICE9PSAtMSkgewogICAgICAgICAgcmVzdWx0cy5wdXNoKHsKICAgICAgICAgICAgdGV4dDogY29udGVudC5zdWJzdHIocG9zIC0gMjAsIDQwKSwKICAgICAgICAgICAgcG9zaXRpb246IHBvcwogICAgICAgICAgfSk7CiAgICAgICAgICBwb3MgPSBjb250ZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeS50b0xvd2VyQ2FzZSgpLCBwb3MgKyAxKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5zZWFyY2hSZXN1bHRzID0gcmVzdWx0czsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcGVyZm9ybWluZyBzZWFyY2g6JywgZXJyKTsKICAgICAgfQogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBlZGl0b3JFbGVtZW50LCB0b29sYmFyQ29udGFpbmVyOwogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfdGhpcy4kc3RvcmUuc2V0KCdlZGl0b3IvZWRpdG9yS2V5JywgJ2JvZGUnKTsKICAgICAgICAgICAgaWYgKF90aGlzLm1vZGUgPT09ICdjcmVhdGUnICYmICFfdGhpcy4kc3RvcmUuZ2V0KCdlZGl0b3IvY29udGVudCcpKSB7CiAgICAgICAgICAgICAgX3RoaXMuJHN0b3JlLnNldCgnZWRpdG9yL2NvbnRlbnQnLCAnPGgxPkhlYWRlcjwvaDE+PHA+WW91ciBjb250ZW50IGhlcmU8L3A+Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gX3RoaXMuJG5leHRUaWNrKCk7CiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGVkaXRvckVsZW1lbnQgPSBfdGhpcy4kcmVmcy5lZGl0b3I7CiAgICAgICAgICAgIHRvb2xiYXJDb250YWluZXIgPSBfdGhpcy4kcmVmcy50b29sYmFyQ29udGFpbmVyOwogICAgICAgICAgICBpZiAoISghZWRpdG9yRWxlbWVudCB8fCAhdG9vbGJhckNvbnRhaW5lcikpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIGVkaXRvciBlbGVtZW50cyBub3QgZm91bmQnKTsKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBUaXB0YXAgZWRpdG9yIHdpdGggZXNzZW50aWFsIGZlYXR1cmVzIGZpcnN0CiAgICAgICAgICAgIF90aGlzLmVkaXRvciA9IG5ldyBFZGl0b3IoewogICAgICAgICAgICAgIGVsZW1lbnQ6IGVkaXRvckVsZW1lbnQsCiAgICAgICAgICAgICAgZXh0ZW5zaW9uczogW1N0YXJ0ZXJLaXQsIFBsYWNlaG9sZGVyLmNvbmZpZ3VyZSh7CiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1dyaXRlIHNvbWV0aGluZy4uLicKICAgICAgICAgICAgICB9KSwgSW1hZ2UuY29uZmlndXJlKHsKICAgICAgICAgICAgICAgIGFsbG93QmFzZTY0OiB0cnVlLAogICAgICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHsKICAgICAgICAgICAgICAgICAgY2xhc3M6ICdlZGl0b3ItaW1hZ2UnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksIExpbmsuY29uZmlndXJlKHsKICAgICAgICAgICAgICAgIG9wZW5PbkNsaWNrOiBmYWxzZSwKICAgICAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7CiAgICAgICAgICAgICAgICAgIGNsYXNzOiAnZWRpdG9yLWxpbmsnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksIFRhYmxlLmNvbmZpZ3VyZSh7CiAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUKICAgICAgICAgICAgICB9KSwgVGFibGVSb3csIFRhYmxlSGVhZGVyLCBUYWJsZUNlbGwsIFRleHRTdHlsZS5jb25maWd1cmUoewogICAgICAgICAgICAgICAgdHlwZXM6IFsndGV4dFN0eWxlJ10KICAgICAgICAgICAgICB9KSwgQ29sb3IuY29uZmlndXJlKHsKICAgICAgICAgICAgICAgIHR5cGVzOiBbJ3RleHRTdHlsZSddCiAgICAgICAgICAgICAgfSksIEZvbnRGYW1pbHkuY29uZmlndXJlKHsKICAgICAgICAgICAgICAgIHR5cGVzOiBbJ3RleHRTdHlsZSddCiAgICAgICAgICAgICAgfSksIFRleHRBbGlnbi5jb25maWd1cmUoewogICAgICAgICAgICAgICAgdHlwZXM6IFsnaGVhZGluZycsICdwYXJhZ3JhcGgnXQogICAgICAgICAgICAgIH0pLCBIaWdobGlnaHQuY29uZmlndXJlKHsKICAgICAgICAgICAgICAgIG11bHRpY29sb3I6IHRydWUKICAgICAgICAgICAgICB9KSwgU3Vic2NyaXB0LmNvbmZpZ3VyZSgpLCBTdXBlcnNjcmlwdC5jb25maWd1cmUoKSwgVGFza0xpc3QsIFRhc2tJdGVtLmNvbmZpZ3VyZSh7CiAgICAgICAgICAgICAgICBuZXN0ZWQ6IHRydWUKICAgICAgICAgICAgICB9KSwgQ29kZUJsb2NrTG93bGlnaHQuY29uZmlndXJlKHsKICAgICAgICAgICAgICAgIGxvd2xpZ2h0OiBsb3dsaWdodAogICAgICAgICAgICAgIH0pXSwKICAgICAgICAgICAgICBjb250ZW50OiBfdGhpcy4kc3RvcmUuZ2V0KCdlZGl0b3IvY29udGVudCcpLAogICAgICAgICAgICAgIGF1dG9mb2N1czogdHJ1ZSwKICAgICAgICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoX3JlZjIpIHsKICAgICAgICAgICAgICAgIHZhciBlZGl0b3IgPSBfcmVmMi5lZGl0b3I7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IGVkaXRvci5nZXRIVE1MKCk7CiAgICAgICAgICAgICAgICAgIF90aGlzLiRzdG9yZS5zZXQoJ2VkaXRvci9jb250ZW50JywgYmVhdXRpZnkoaHRtbCwgewogICAgICAgICAgICAgICAgICAgIGluZGVudF9zaXplOiAyLAogICAgICAgICAgICAgICAgICAgIGVuZF93aXRoX25ld2xpbmU6IHRydWUKICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVTdGF0cygpOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGVkaXRvciB1cGRhdGU6JywgZXJyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gVmVyaWZ5IGVkaXRvciB3YXMgY3JlYXRlZCBzdWNjZXNzZnVsbHkKICAgICAgICAgICAgaWYgKF90aGlzLmVkaXRvcikgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBpbml0aWFsaXplIGVkaXRvcicpOwogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgLy8gU2V0dXAgc3BlY2lhbCBoYW5kbGVycyBmb3Igc2xhc2ggY29tbWFuZHMKICAgICAgICAgICAgX3RoaXMuZWRpdG9yLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKF9yZWYzKSB7CiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gX3JlZjMuZXZlbnQ7CiAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJy8nICYmICFfdGhpcy5zbGFzaENvbW1hbmRBY3RpdmUpIHsKICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBfdGhpcy50b2dnbGVTbGFzaENvbW1hbmQoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gSW5pdGlhbCBzdGF0cyB1cGRhdGUKICAgICAgICAgICAgX3RoaXMudXBkYXRlU3RhdHMoKTsKCiAgICAgICAgICAgIC8vIExvYWQgdmVyc2lvbiBoaXN0b3J5IGlmIGF2YWlsYWJsZQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIF90aGlzLiRhcG9sbG8ucXVlcnkoewogICAgICAgICAgICAgICAgcXVlcnk6IGdxbChfdGVtcGxhdGVPYmplY3QgfHwgKF90ZW1wbGF0ZU9iamVjdCA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZShbIlxuICAgICAgICAgICAgcXVlcnkgKCRpZDogSW50ISkge1xuICAgICAgICAgICAgICBwYWdlcyB7XG4gICAgICAgICAgICAgICAgaGlzdG9yeSAoaWQ6ICRpZCkge1xuICAgICAgICAgICAgICAgICAgdHJhaWwge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3JOYW1lXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEF0XG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb25JZFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICJdKSkpLAogICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgICAgICAgICAgIGlkOiBfdGhpcy4kc3RvcmUuZ2V0KCdwYWdlL2lkJykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7CiAgICAgICAgICAgICAgICBfdGhpcy52ZXJzaW9ucyA9IF9nZXQocmVzcCwgJ2RhdGEucGFnZXMuaGlzdG9yeS50cmFpbCcsIFtdKS5tYXAoZnVuY3Rpb24gKGgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBpZDogaC52ZXJzaW9uSWQsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogaC5jb250ZW50LAogICAgICAgICAgICAgICAgICAgIGF1dGhvcjogaC5hdXRob3JOYW1lLAogICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogaC5jcmVhdGVkQXQKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIHZlcnNpb24gaGlzdG9yeTonLCBlcnIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBNYXJrIGVkaXRvciBhcyByZWFkeSBvbmx5IGFmdGVyIHN1Y2Nlc3NmdWwgaW5pdGlhbGl6YXRpb24KICAgICAgICAgICAgX3RoaXMuaXNFZGl0b3JSZWFkeSA9IHRydWU7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTg7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMik7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluaXRpYWxpemluZyBlZGl0b3I6JywgX2NvbnRleHQudDApOwogICAgICAgICAgICBfdGhpcy4kc3RvcmUuY29tbWl0KCdzaG93Tm90aWZpY2F0aW9uJywgewogICAgICAgICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBlZGl0b3I6ICcgKyBfY29udGV4dC50MC5tZXNzYWdlLAogICAgICAgICAgICAgIHN0eWxlOiAnZXJyb3InCiAgICAgICAgICAgIH0pOwogICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgLy8gU2V0IHVwIGV2ZW50IGxpc3RlbmVycyBmb3IgY29udGVudCBpbnNlcnRpb24KICAgICAgICAgICAgX3RoaXMuJHJvb3QuJG9uKCdlZGl0b3JJbnNlcnQnLCBmdW5jdGlvbiAob3B0cykgewogICAgICAgICAgICAgIGlmICghX3RoaXMuZWRpdG9yIHx8ICFfdGhpcy5pc0VkaXRvclJlYWR5KSByZXR1cm47CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHN3aXRjaCAob3B0cy5raW5kKSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgJ0lNQUdFJzoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5lZGl0b3IuY2hhaW4oKS5mb2N1cygpLnNldEltYWdlKHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogb3B0cy5wYXRoCiAgICAgICAgICAgICAgICAgICAgfSkucnVuKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgJ0JJTkFSWSc6CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZWRpdG9yLmNoYWluKCkuZm9jdXMoKS5zZXRMaW5rKHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IG9wdHMucGF0aAogICAgICAgICAgICAgICAgICAgIH0pLnJ1bigpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlICdESUFHUkFNJzoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5lZGl0b3IuY2hhaW4oKS5mb2N1cygpLnNldEltYWdlKHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogImRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsIiArIG9wdHMudGV4dAogICAgICAgICAgICAgICAgICAgIH0pLnJ1bigpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlICdJTkZPX0JPWCc6CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZWRpdG9yLmNoYWluKCkuZm9jdXMoKS5pbnNlcnRDb250ZW50KHsKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbmZvQm94JywKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9wdHMudHlwZSB8fCAnaW5mbycKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBbewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGFyYWdyYXBoJwogICAgICAgICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgICAgICAgICB9KS5ydW4oKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAnRVhQQU5EX0NPTExBUFNFJzoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5lZGl0b3IuY2hhaW4oKS5mb2N1cygpLmluc2VydENvbnRlbnQoewogICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2V4cGFuZENvbGxhcHNlJywKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBvcHRzLnRpdGxlIHx8ICdFeHBhbmQvQ29sbGFwc2UnCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgY29udGVudDogW3sKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcKICAgICAgICAgICAgICAgICAgICAgIH1dCiAgICAgICAgICAgICAgICAgICAgfSkucnVuKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbnNlcnRpbmcgY29udGVudDonLCBlcnIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF90aGlzLiRyb290LiRvbignZWRpdG9yTGlua1RvUGFnZScsIGZ1bmN0aW9uIChvcHRzKSB7CiAgICAgICAgICAgICAgX3RoaXMuaW5zZXJ0TGluaygpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIEhhbmRsZSBzYXZlIGNvbmZsaWN0CiAgICAgICAgICAgIF90aGlzLiRyb290LiRvbignc2F2ZUNvbmZsaWN0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIF90aGlzLmlzQ29uZmxpY3QgPSB0cnVlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX3RoaXMuJHJvb3QuJG9uKCdvdmVyd3JpdGVFZGl0b3JDb250ZW50JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGlmICghX3RoaXMuZWRpdG9yKSByZXR1cm47CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIF90aGlzLmVkaXRvci5jb21tYW5kcy5zZXRDb250ZW50KF90aGlzLiRzdG9yZS5nZXQoJ2VkaXRvci9jb250ZW50JykpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb3ZlcndyaXRpbmcgZWRpdG9yIGNvbnRlbnQ6JywgZXJyKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzIsIDE4XV0pOwogICAgfSkpKCk7CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgaWYgKHRoaXMuZWRpdG9yKSB7CiAgICAgIHRyeSB7CiAgICAgICAgdGhpcy5lZGl0b3IuZGVzdHJveSgpOwogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkZXN0cm95aW5nIGVkaXRvcjonLCBlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRoaXMuZWRpdG9yID0gbnVsbDsKICAgICAgfQogICAgfQoKICAgIC8vIENsZWFuIHVwIGV2ZW50IGxpc3RlbmVycwogICAgdGhpcy4kcm9vdC4kb2ZmKCdlZGl0b3JJbnNlcnQnKTsKICAgIHRoaXMuJHJvb3QuJG9mZignZWRpdG9yTGlua1RvUGFnZScpOwogICAgdGhpcy4kcm9vdC4kb2ZmKCdzYXZlQ29uZmxpY3QnKTsKICAgIHRoaXMuJHJvb3QuJG9mZignb3ZlcndyaXRlRWRpdG9yQ29udGVudCcpOwogIH0KfTs="},null]}