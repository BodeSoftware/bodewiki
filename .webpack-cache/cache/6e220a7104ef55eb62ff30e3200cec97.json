{"remainingRequest":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js??ref--0-1!/Users/shanebeal/Desktop/bodewiki/node_modules/vuetify/lib/components/VTimePicker/VTimePickerClock.js","dependencies":[{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/vuetify/lib/components/VTimePicker/VTimePickerClock.js","mtime":1742846263594},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/cache-loader/dist/cjs.js","mtime":1742846258556},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js","mtime":1742846259254}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}