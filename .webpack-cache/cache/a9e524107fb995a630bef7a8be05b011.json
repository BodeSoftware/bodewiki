{"remainingRequest":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js??ref--0-1!/Users/shanebeal/Desktop/bodewiki/node_modules/webpack-modernizr-loader/index.js!/Users/shanebeal/Desktop/bodewiki/client/.modernizrrc.js","dependencies":[{"path":"/Users/shanebeal/Desktop/bodewiki/client/.modernizrrc.js","mtime":1742769082000},{"path":"/Users/shanebeal/Desktop/bodewiki/.babelrc","mtime":1742797763162},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/cache-loader/dist/cjs.js","mtime":1742846258556},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/babel-loader/lib/index.js","mtime":1742846259254},{"path":"/Users/shanebeal/Desktop/bodewiki/node_modules/webpack-modernizr-loader/index.js","mtime":1742846258549}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}